/* Generated by Cython 0.18 on Sat Jun 01 13:32:56 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__lm_render_state
#define __PYX_HAVE_API__lm_render_state
#include "glew.h"
#include "glext.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <stack>
#include "string.h"
#include "stdlib.h"
#include "memory.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "lm_render_state.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_15lm_render_state_CRenderer;

/* "c_opengl.pxd":20
 * # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * ctypedef void (*_GLUfuncptr)()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "glew.h":
 */
typedef void (*__pyx_t_8c_opengl__GLUfuncptr)(void);
struct __pyx_t_15lm_render_state_CVertexData;
struct __pyx_t_15lm_render_state_CRect;
struct __pyx_t_15lm_render_state_CMat;
struct __pyx_t_15lm_render_state_CColor;
struct __pyx_t_15lm_render_state_CPos;
struct __pyx_t_15lm_render_state_CCoords;

/* "lm_render_state.pyx":7
 * from memory cimport memset
 * 
 * cdef struct CVertexData:             # <<<<<<<<<<<<<<
 * 	float x, y
 * 	float u, v
 */
struct __pyx_t_15lm_render_state_CVertexData {
  float x;
  float y;
  float u;
  float v;
  unsigned int color;
  unsigned int secondary_color;
  float padding[2];
};

/* "lm_render_state.pyx":13
 * 	unsigned secondary_color
 * 	float padding[2]
 * cdef struct CRect:             # <<<<<<<<<<<<<<
 * 	float xmin, ymin, xmax, ymax
 * cdef struct CMat:
 */
struct __pyx_t_15lm_render_state_CRect {
  float xmin;
  float ymin;
  float xmax;
  float ymax;
};

/* "lm_render_state.pyx":15
 * cdef struct CRect:
 * 	float xmin, ymin, xmax, ymax
 * cdef struct CMat:             # <<<<<<<<<<<<<<
 * 	float t0, t1, s0, s1, r0, r1
 * cdef struct CColor:
 */
struct __pyx_t_15lm_render_state_CMat {
  float t0;
  float t1;
  float s0;
  float s1;
  float r0;
  float r1;
};

/* "lm_render_state.pyx":17
 * cdef struct CMat:
 * 	float t0, t1, s0, s1, r0, r1
 * cdef struct CColor:             # <<<<<<<<<<<<<<
 * 	float r, g, b, a
 * cdef struct CPos:
 */
struct __pyx_t_15lm_render_state_CColor {
  float r;
  float g;
  float b;
  float a;
};

/* "lm_render_state.pyx":19
 * cdef struct CColor:
 * 	float r, g, b, a
 * cdef struct CPos:             # <<<<<<<<<<<<<<
 * 	float x, y
 * cdef struct CCoords:
 */
struct __pyx_t_15lm_render_state_CPos {
  float x;
  float y;
};

/* "lm_render_state.pyx":21
 * cdef struct CPos:
 * 	float x, y
 * cdef struct CCoords:             # <<<<<<<<<<<<<<
 * 	float x0, y0, x1, y1, x2, y2, x3, y3
 * cdef void color_add(CColor *out, CColor *a, CColor *b):
 */
struct __pyx_t_15lm_render_state_CCoords {
  float x0;
  float y0;
  float x1;
  float y1;
  float x2;
  float y2;
  float x3;
  float y3;
};

/* "lm_render_state.pyx":53
 * 	return ret
 * 
 * cdef class CRenderer:             # <<<<<<<<<<<<<<
 * 
 * 	cdef vector[CMat*] vec_mat
 */
struct __pyx_obj_15lm_render_state_CRenderer {
  PyObject_HEAD
  struct __pyx_vtabstruct_15lm_render_state_CRenderer *__pyx_vtab;
  std::vector<struct __pyx_t_15lm_render_state_CMat *> vec_mat;
  std::vector<struct __pyx_t_15lm_render_state_CPos *> vec_pos;
  std::vector<struct __pyx_t_15lm_render_state_CColor *> vec_color;
  std::vector<struct __pyx_t_15lm_render_state_CCoords *> vec_coords;
  int _tex_tgt;
  int _tex_id;
  int _blend_mode;
  std::stack<struct __pyx_t_15lm_render_state_CColor *> stk_cadd;
  std::stack<struct __pyx_t_15lm_render_state_CColor *> stk_cmul;
  std::stack<struct __pyx_t_15lm_render_state_CMat *> stk_mat;
  std::stack<int> stk_blend_mode;
  std::stack<struct __pyx_t_15lm_render_state_CColor *> cadd_pool;
  std::stack<struct __pyx_t_15lm_render_state_CColor *> cmul_pool;
  std::stack<struct __pyx_t_15lm_render_state_CMat *> mat_pool;
  struct __pyx_t_15lm_render_state_CVertexData vbuf[1000];
  int vbuf_size;
  int mask_active;
  struct __pyx_t_15lm_render_state_CRect mask_rect;
};



struct __pyx_vtabstruct_15lm_render_state_CRenderer {
  void (*set_blend_mode)(struct __pyx_obj_15lm_render_state_CRenderer *, int);
  struct __pyx_t_15lm_render_state_CMat *(*get_mat)(struct __pyx_obj_15lm_render_state_CRenderer *);
  struct __pyx_t_15lm_render_state_CColor *(*get_cadd)(struct __pyx_obj_15lm_render_state_CRenderer *);
  struct __pyx_t_15lm_render_state_CColor *(*get_cmul)(struct __pyx_obj_15lm_render_state_CRenderer *);
  void (*del_mat)(struct __pyx_obj_15lm_render_state_CRenderer *, struct __pyx_t_15lm_render_state_CMat *);
  void (*del_cadd)(struct __pyx_obj_15lm_render_state_CRenderer *, struct __pyx_t_15lm_render_state_CColor *);
  void (*del_cmul)(struct __pyx_obj_15lm_render_state_CRenderer *, struct __pyx_t_15lm_render_state_CColor *);
  void (*_append)(struct __pyx_obj_15lm_render_state_CRenderer *, int, int);
  void (*_update_contex)(struct __pyx_obj_15lm_render_state_CRenderer *);
  void (*_flush)(struct __pyx_obj_15lm_render_state_CRenderer *);
};
static struct __pyx_vtabstruct_15lm_render_state_CRenderer *__pyx_vtabptr_15lm_render_state_CRenderer;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#include <new>

static CYTHON_INLINE GLenum __Pyx_PyInt_from_py_GLenum(PyObject *);

static CYTHON_INLINE GLsizei __Pyx_PyInt_from_py_GLsizei(PyObject *);

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'c_opengl' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.stack' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'memory' */

/* Module declarations from 'lm_render_state' */
static PyTypeObject *__pyx_ptype_15lm_render_state_CRenderer = 0;
static void __pyx_f_15lm_render_state_color_add(struct __pyx_t_15lm_render_state_CColor *, struct __pyx_t_15lm_render_state_CColor *, struct __pyx_t_15lm_render_state_CColor *); /*proto*/
static void __pyx_f_15lm_render_state_color_mul(struct __pyx_t_15lm_render_state_CColor *, struct __pyx_t_15lm_render_state_CColor *, struct __pyx_t_15lm_render_state_CColor *); /*proto*/
static void __pyx_f_15lm_render_state_mat_mul(struct __pyx_t_15lm_render_state_CMat *, struct __pyx_t_15lm_render_state_CMat *, struct __pyx_t_15lm_render_state_CMat *); /*proto*/
static void __pyx_f_15lm_render_state_transform_coords(struct __pyx_t_15lm_render_state_CCoords *, struct __pyx_t_15lm_render_state_CCoords *, struct __pyx_t_15lm_render_state_CMat *); /*proto*/
static unsigned int __pyx_f_15lm_render_state_pack_color(struct __pyx_t_15lm_render_state_CColor *); /*proto*/
#define __Pyx_MODULE_NAME "lm_render_state"
int __pyx_module_is_main_lm_render_state = 0;

/* Implementation of 'lm_render_state' */
static PyObject *__pyx_builtin_xrange;
static int __pyx_pf_15lm_render_state_9CRenderer___cinit__(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_2init(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_4begin(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_6push_state(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, int __pyx_v_cadd_idx, int __pyx_v_cmul_idx, int __pyx_v_mat_idx, int __pyx_v_blend_mode_idx); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_8pop_state(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_10set_mask(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, PyObject *__pyx_v_coord_idx); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_12draw_image(CYTHON_UNUSED struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tex_tgt, CYTHON_UNUSED PyObject *__pyx_v_tex_id, CYTHON_UNUSED PyObject *__pyx_v_coord_idx, CYTHON_UNUSED PyObject *__pyx_v_tex_coord_idx); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_14reg_pos(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_x, float __pyx_v_y); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_16reg_color(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_18reg_mat(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_t0, float __pyx_v_t1, float __pyx_v_s0, float __pyx_v_s1, float __pyx_v_r0, float __pyx_v_r1); /* proto */
static PyObject *__pyx_pf_15lm_render_state_9CRenderer_20reg_coords(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_x0, float __pyx_v_y0, float __pyx_v_x1, float __pyx_v_y1, float __pyx_v_x2, float __pyx_v_y2, float __pyx_v_x3, float __pyx_v_y3); /* proto */
static char __pyx_k_1[] = "GL_SECONDARY_COLOR_ARRAY";
static char __pyx_k_2[] = "_is_blend_mode_dirty";
static char __pyx_k__a[] = "a";
static char __pyx_k__b[] = "b";
static char __pyx_k__g[] = "g";
static char __pyx_k__r[] = "r";
static char __pyx_k__x[] = "x";
static char __pyx_k__y[] = "y";
static char __pyx_k__gl[] = "gl";
static char __pyx_k__r0[] = "r0";
static char __pyx_k__r1[] = "r1";
static char __pyx_k__s0[] = "s0";
static char __pyx_k__s1[] = "s1";
static char __pyx_k__t0[] = "t0";
static char __pyx_k__t1[] = "t1";
static char __pyx_k__x0[] = "x0";
static char __pyx_k__x1[] = "x1";
static char __pyx_k__x2[] = "x2";
static char __pyx_k__x3[] = "x3";
static char __pyx_k__y0[] = "y0";
static char __pyx_k__y1[] = "y1";
static char __pyx_k__y2[] = "y2";
static char __pyx_k__y3[] = "y3";
static char __pyx_k__range[] = "range";
static char __pyx_k__Enable[] = "Enable";
static char __pyx_k__tex_id[] = "tex_id";
static char __pyx_k__xrange[] = "xrange";
static char __pyx_k__mat_idx[] = "mat_idx";
static char __pyx_k__tex_tgt[] = "tex_tgt";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__cadd_idx[] = "cadd_idx";
static char __pyx_k__cmul_idx[] = "cmul_idx";
static char __pyx_k__coord_idx[] = "coord_idx";
static char __pyx_k__vbuf_head[] = "vbuf_head";
static char __pyx_k___is_tex_dirty[] = "_is_tex_dirty";
static char __pyx_k__tex_coord_idx[] = "tex_coord_idx";
static char __pyx_k__blend_mode_idx[] = "blend_mode_idx";
static char __pyx_k__glBlendEquationEXT[] = "glBlendEquationEXT";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_n_s__Enable;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___is_tex_dirty;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__blend_mode_idx;
static PyObject *__pyx_n_s__cadd_idx;
static PyObject *__pyx_n_s__cmul_idx;
static PyObject *__pyx_n_s__coord_idx;
static PyObject *__pyx_n_s__g;
static PyObject *__pyx_n_s__gl;
static PyObject *__pyx_n_s__glBlendEquationEXT;
static PyObject *__pyx_n_s__mat_idx;
static PyObject *__pyx_n_s__r;
static PyObject *__pyx_n_s__r0;
static PyObject *__pyx_n_s__r1;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__s0;
static PyObject *__pyx_n_s__s1;
static PyObject *__pyx_n_s__t0;
static PyObject *__pyx_n_s__t1;
static PyObject *__pyx_n_s__tex_coord_idx;
static PyObject *__pyx_n_s__tex_id;
static PyObject *__pyx_n_s__tex_tgt;
static PyObject *__pyx_n_s__vbuf_head;
static PyObject *__pyx_n_s__x;
static PyObject *__pyx_n_s__x0;
static PyObject *__pyx_n_s__x1;
static PyObject *__pyx_n_s__x2;
static PyObject *__pyx_n_s__x3;
static PyObject *__pyx_n_s__xrange;
static PyObject *__pyx_n_s__y;
static PyObject *__pyx_n_s__y0;
static PyObject *__pyx_n_s__y1;
static PyObject *__pyx_n_s__y2;
static PyObject *__pyx_n_s__y3;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_24;

/* "lm_render_state.pyx":23
 * cdef struct CCoords:
 * 	float x0, y0, x1, y1, x2, y2, x3, y3
 * cdef void color_add(CColor *out, CColor *a, CColor *b):             # <<<<<<<<<<<<<<
 * 	out.r = a.r + b.r
 * 	out.g = a.g + b.g
 */

static void __pyx_f_15lm_render_state_color_add(struct __pyx_t_15lm_render_state_CColor *__pyx_v_out, struct __pyx_t_15lm_render_state_CColor *__pyx_v_a, struct __pyx_t_15lm_render_state_CColor *__pyx_v_b) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_add", 0);

  /* "lm_render_state.pyx":24
 * 	float x0, y0, x1, y1, x2, y2, x3, y3
 * cdef void color_add(CColor *out, CColor *a, CColor *b):
 * 	out.r = a.r + b.r             # <<<<<<<<<<<<<<
 * 	out.g = a.g + b.g
 * 	out.b = a.b + b.b
 */
  __pyx_v_out->r = (__pyx_v_a->r + __pyx_v_b->r);

  /* "lm_render_state.pyx":25
 * cdef void color_add(CColor *out, CColor *a, CColor *b):
 * 	out.r = a.r + b.r
 * 	out.g = a.g + b.g             # <<<<<<<<<<<<<<
 * 	out.b = a.b + b.b
 * 	out.a = a.a + b.a
 */
  __pyx_v_out->g = (__pyx_v_a->g + __pyx_v_b->g);

  /* "lm_render_state.pyx":26
 * 	out.r = a.r + b.r
 * 	out.g = a.g + b.g
 * 	out.b = a.b + b.b             # <<<<<<<<<<<<<<
 * 	out.a = a.a + b.a
 * cdef void color_mul(CColor *out, CColor *a, CColor *b):
 */
  __pyx_v_out->b = (__pyx_v_a->b + __pyx_v_b->b);

  /* "lm_render_state.pyx":27
 * 	out.g = a.g + b.g
 * 	out.b = a.b + b.b
 * 	out.a = a.a + b.a             # <<<<<<<<<<<<<<
 * cdef void color_mul(CColor *out, CColor *a, CColor *b):
 * 	out.r = a.r * b.r
 */
  __pyx_v_out->a = (__pyx_v_a->a + __pyx_v_b->a);

  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":28
 * 	out.b = a.b + b.b
 * 	out.a = a.a + b.a
 * cdef void color_mul(CColor *out, CColor *a, CColor *b):             # <<<<<<<<<<<<<<
 * 	out.r = a.r * b.r
 * 	out.g = a.g * b.g
 */

static void __pyx_f_15lm_render_state_color_mul(struct __pyx_t_15lm_render_state_CColor *__pyx_v_out, struct __pyx_t_15lm_render_state_CColor *__pyx_v_a, struct __pyx_t_15lm_render_state_CColor *__pyx_v_b) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_mul", 0);

  /* "lm_render_state.pyx":29
 * 	out.a = a.a + b.a
 * cdef void color_mul(CColor *out, CColor *a, CColor *b):
 * 	out.r = a.r * b.r             # <<<<<<<<<<<<<<
 * 	out.g = a.g * b.g
 * 	out.b = a.b * b.b
 */
  __pyx_v_out->r = (__pyx_v_a->r * __pyx_v_b->r);

  /* "lm_render_state.pyx":30
 * cdef void color_mul(CColor *out, CColor *a, CColor *b):
 * 	out.r = a.r * b.r
 * 	out.g = a.g * b.g             # <<<<<<<<<<<<<<
 * 	out.b = a.b * b.b
 * 	out.a = a.a * b.a
 */
  __pyx_v_out->g = (__pyx_v_a->g * __pyx_v_b->g);

  /* "lm_render_state.pyx":31
 * 	out.r = a.r * b.r
 * 	out.g = a.g * b.g
 * 	out.b = a.b * b.b             # <<<<<<<<<<<<<<
 * 	out.a = a.a * b.a
 * cdef void mat_mul(CMat *out, CMat *a, CMat *b):
 */
  __pyx_v_out->b = (__pyx_v_a->b * __pyx_v_b->b);

  /* "lm_render_state.pyx":32
 * 	out.g = a.g * b.g
 * 	out.b = a.b * b.b
 * 	out.a = a.a * b.a             # <<<<<<<<<<<<<<
 * cdef void mat_mul(CMat *out, CMat *a, CMat *b):
 * 	out.s0 = a.s0 * b.s0 + a.r1 * b.r0
 */
  __pyx_v_out->a = (__pyx_v_a->a * __pyx_v_b->a);

  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":33
 * 	out.b = a.b * b.b
 * 	out.a = a.a * b.a
 * cdef void mat_mul(CMat *out, CMat *a, CMat *b):             # <<<<<<<<<<<<<<
 * 	out.s0 = a.s0 * b.s0 + a.r1 * b.r0
 * 	out.s1 = a.r0 * b.r1 + a.s1 * b.s1
 */

static void __pyx_f_15lm_render_state_mat_mul(struct __pyx_t_15lm_render_state_CMat *__pyx_v_out, struct __pyx_t_15lm_render_state_CMat *__pyx_v_a, struct __pyx_t_15lm_render_state_CMat *__pyx_v_b) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mat_mul", 0);

  /* "lm_render_state.pyx":34
 * 	out.a = a.a * b.a
 * cdef void mat_mul(CMat *out, CMat *a, CMat *b):
 * 	out.s0 = a.s0 * b.s0 + a.r1 * b.r0             # <<<<<<<<<<<<<<
 * 	out.s1 = a.r0 * b.r1 + a.s1 * b.s1
 * 	out.t0 = a.s0 * b.t0 + a.r1 * b.t1 + a.t0
 */
  __pyx_v_out->s0 = ((__pyx_v_a->s0 * __pyx_v_b->s0) + (__pyx_v_a->r1 * __pyx_v_b->r0));

  /* "lm_render_state.pyx":35
 * cdef void mat_mul(CMat *out, CMat *a, CMat *b):
 * 	out.s0 = a.s0 * b.s0 + a.r1 * b.r0
 * 	out.s1 = a.r0 * b.r1 + a.s1 * b.s1             # <<<<<<<<<<<<<<
 * 	out.t0 = a.s0 * b.t0 + a.r1 * b.t1 + a.t0
 * 	out.t1 = a.r0 * b.t0 + a.s1 * b.t1 + a.t1
 */
  __pyx_v_out->s1 = ((__pyx_v_a->r0 * __pyx_v_b->r1) + (__pyx_v_a->s1 * __pyx_v_b->s1));

  /* "lm_render_state.pyx":36
 * 	out.s0 = a.s0 * b.s0 + a.r1 * b.r0
 * 	out.s1 = a.r0 * b.r1 + a.s1 * b.s1
 * 	out.t0 = a.s0 * b.t0 + a.r1 * b.t1 + a.t0             # <<<<<<<<<<<<<<
 * 	out.t1 = a.r0 * b.t0 + a.s1 * b.t1 + a.t1
 * 	out.r0 = a.r0 * b.s0 + a.s1 * b.r0
 */
  __pyx_v_out->t0 = (((__pyx_v_a->s0 * __pyx_v_b->t0) + (__pyx_v_a->r1 * __pyx_v_b->t1)) + __pyx_v_a->t0);

  /* "lm_render_state.pyx":37
 * 	out.s1 = a.r0 * b.r1 + a.s1 * b.s1
 * 	out.t0 = a.s0 * b.t0 + a.r1 * b.t1 + a.t0
 * 	out.t1 = a.r0 * b.t0 + a.s1 * b.t1 + a.t1             # <<<<<<<<<<<<<<
 * 	out.r0 = a.r0 * b.s0 + a.s1 * b.r0
 * 	out.r1 = a.s0 * b.r1 + a.r1 * b.s1
 */
  __pyx_v_out->t1 = (((__pyx_v_a->r0 * __pyx_v_b->t0) + (__pyx_v_a->s1 * __pyx_v_b->t1)) + __pyx_v_a->t1);

  /* "lm_render_state.pyx":38
 * 	out.t0 = a.s0 * b.t0 + a.r1 * b.t1 + a.t0
 * 	out.t1 = a.r0 * b.t0 + a.s1 * b.t1 + a.t1
 * 	out.r0 = a.r0 * b.s0 + a.s1 * b.r0             # <<<<<<<<<<<<<<
 * 	out.r1 = a.s0 * b.r1 + a.r1 * b.s1
 * cdef void transform_coords(CCoords *out, CCoords *a, CMat *m):
 */
  __pyx_v_out->r0 = ((__pyx_v_a->r0 * __pyx_v_b->s0) + (__pyx_v_a->s1 * __pyx_v_b->r0));

  /* "lm_render_state.pyx":39
 * 	out.t1 = a.r0 * b.t0 + a.s1 * b.t1 + a.t1
 * 	out.r0 = a.r0 * b.s0 + a.s1 * b.r0
 * 	out.r1 = a.s0 * b.r1 + a.r1 * b.s1             # <<<<<<<<<<<<<<
 * cdef void transform_coords(CCoords *out, CCoords *a, CMat *m):
 * 	out.x0 = a.x0 * m.s0 + a.y0 * m.r1 + m.t0
 */
  __pyx_v_out->r1 = ((__pyx_v_a->s0 * __pyx_v_b->r1) + (__pyx_v_a->r1 * __pyx_v_b->s1));

  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":40
 * 	out.r0 = a.r0 * b.s0 + a.s1 * b.r0
 * 	out.r1 = a.s0 * b.r1 + a.r1 * b.s1
 * cdef void transform_coords(CCoords *out, CCoords *a, CMat *m):             # <<<<<<<<<<<<<<
 * 	out.x0 = a.x0 * m.s0 + a.y0 * m.r1 + m.t0
 * 	out.y0 = a.x0 + m.r0 + a.y0 * m.s1 + m.t1
 */

static void __pyx_f_15lm_render_state_transform_coords(struct __pyx_t_15lm_render_state_CCoords *__pyx_v_out, struct __pyx_t_15lm_render_state_CCoords *__pyx_v_a, struct __pyx_t_15lm_render_state_CMat *__pyx_v_m) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_coords", 0);

  /* "lm_render_state.pyx":41
 * 	out.r1 = a.s0 * b.r1 + a.r1 * b.s1
 * cdef void transform_coords(CCoords *out, CCoords *a, CMat *m):
 * 	out.x0 = a.x0 * m.s0 + a.y0 * m.r1 + m.t0             # <<<<<<<<<<<<<<
 * 	out.y0 = a.x0 + m.r0 + a.y0 * m.s1 + m.t1
 * 	out.x1 = a.x1 * m.s0 + a.y1 * m.r1 + m.t0
 */
  __pyx_v_out->x0 = (((__pyx_v_a->x0 * __pyx_v_m->s0) + (__pyx_v_a->y0 * __pyx_v_m->r1)) + __pyx_v_m->t0);

  /* "lm_render_state.pyx":42
 * cdef void transform_coords(CCoords *out, CCoords *a, CMat *m):
 * 	out.x0 = a.x0 * m.s0 + a.y0 * m.r1 + m.t0
 * 	out.y0 = a.x0 + m.r0 + a.y0 * m.s1 + m.t1             # <<<<<<<<<<<<<<
 * 	out.x1 = a.x1 * m.s0 + a.y1 * m.r1 + m.t0
 * 	out.y1 = a.x1 + m.r0 + a.y1 * m.s1 + m.t1
 */
  __pyx_v_out->y0 = (((__pyx_v_a->x0 + __pyx_v_m->r0) + (__pyx_v_a->y0 * __pyx_v_m->s1)) + __pyx_v_m->t1);

  /* "lm_render_state.pyx":43
 * 	out.x0 = a.x0 * m.s0 + a.y0 * m.r1 + m.t0
 * 	out.y0 = a.x0 + m.r0 + a.y0 * m.s1 + m.t1
 * 	out.x1 = a.x1 * m.s0 + a.y1 * m.r1 + m.t0             # <<<<<<<<<<<<<<
 * 	out.y1 = a.x1 + m.r0 + a.y1 * m.s1 + m.t1
 * 	out.x2 = a.x2 * m.s0 + a.y2 * m.r1 + m.t0
 */
  __pyx_v_out->x1 = (((__pyx_v_a->x1 * __pyx_v_m->s0) + (__pyx_v_a->y1 * __pyx_v_m->r1)) + __pyx_v_m->t0);

  /* "lm_render_state.pyx":44
 * 	out.y0 = a.x0 + m.r0 + a.y0 * m.s1 + m.t1
 * 	out.x1 = a.x1 * m.s0 + a.y1 * m.r1 + m.t0
 * 	out.y1 = a.x1 + m.r0 + a.y1 * m.s1 + m.t1             # <<<<<<<<<<<<<<
 * 	out.x2 = a.x2 * m.s0 + a.y2 * m.r1 + m.t0
 * 	out.y2 = a.x2 + m.r0 + a.y2 * m.s1 + m.t1
 */
  __pyx_v_out->y1 = (((__pyx_v_a->x1 + __pyx_v_m->r0) + (__pyx_v_a->y1 * __pyx_v_m->s1)) + __pyx_v_m->t1);

  /* "lm_render_state.pyx":45
 * 	out.x1 = a.x1 * m.s0 + a.y1 * m.r1 + m.t0
 * 	out.y1 = a.x1 + m.r0 + a.y1 * m.s1 + m.t1
 * 	out.x2 = a.x2 * m.s0 + a.y2 * m.r1 + m.t0             # <<<<<<<<<<<<<<
 * 	out.y2 = a.x2 + m.r0 + a.y2 * m.s1 + m.t1
 * 	out.x3 = a.x3 * m.s0 + a.y3 * m.r1 + m.t0
 */
  __pyx_v_out->x2 = (((__pyx_v_a->x2 * __pyx_v_m->s0) + (__pyx_v_a->y2 * __pyx_v_m->r1)) + __pyx_v_m->t0);

  /* "lm_render_state.pyx":46
 * 	out.y1 = a.x1 + m.r0 + a.y1 * m.s1 + m.t1
 * 	out.x2 = a.x2 * m.s0 + a.y2 * m.r1 + m.t0
 * 	out.y2 = a.x2 + m.r0 + a.y2 * m.s1 + m.t1             # <<<<<<<<<<<<<<
 * 	out.x3 = a.x3 * m.s0 + a.y3 * m.r1 + m.t0
 * 	out.y3 = a.x3 + m.r0 + a.y3 * m.s1 + m.t1
 */
  __pyx_v_out->y2 = (((__pyx_v_a->x2 + __pyx_v_m->r0) + (__pyx_v_a->y2 * __pyx_v_m->s1)) + __pyx_v_m->t1);

  /* "lm_render_state.pyx":47
 * 	out.x2 = a.x2 * m.s0 + a.y2 * m.r1 + m.t0
 * 	out.y2 = a.x2 + m.r0 + a.y2 * m.s1 + m.t1
 * 	out.x3 = a.x3 * m.s0 + a.y3 * m.r1 + m.t0             # <<<<<<<<<<<<<<
 * 	out.y3 = a.x3 + m.r0 + a.y3 * m.s1 + m.t1
 * cdef unsigned pack_color(CColor *color):
 */
  __pyx_v_out->x3 = (((__pyx_v_a->x3 * __pyx_v_m->s0) + (__pyx_v_a->y3 * __pyx_v_m->r1)) + __pyx_v_m->t0);

  /* "lm_render_state.pyx":48
 * 	out.y2 = a.x2 + m.r0 + a.y2 * m.s1 + m.t1
 * 	out.x3 = a.x3 * m.s0 + a.y3 * m.r1 + m.t0
 * 	out.y3 = a.x3 + m.r0 + a.y3 * m.s1 + m.t1             # <<<<<<<<<<<<<<
 * cdef unsigned pack_color(CColor *color):
 * 	cdef unsigned ret = (max(0, min(int(color.r * 255), 255)) << 24) |(max(0, min(int(color.g * 255), 255)) << 16) |(max(0, min(int(color.b * 255), 255)) << 8) | max(0, min(int(color.a * 255), 255))
 */
  __pyx_v_out->y3 = (((__pyx_v_a->x3 + __pyx_v_m->r0) + (__pyx_v_a->y3 * __pyx_v_m->s1)) + __pyx_v_m->t1);

  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":49
 * 	out.x3 = a.x3 * m.s0 + a.y3 * m.r1 + m.t0
 * 	out.y3 = a.x3 + m.r0 + a.y3 * m.s1 + m.t1
 * cdef unsigned pack_color(CColor *color):             # <<<<<<<<<<<<<<
 * 	cdef unsigned ret = (max(0, min(int(color.r * 255), 255)) << 24) |(max(0, min(int(color.g * 255), 255)) << 16) |(max(0, min(int(color.b * 255), 255)) << 8) | max(0, min(int(color.a * 255), 255))
 * 	return ret
 */

static unsigned int __pyx_f_15lm_render_state_pack_color(struct __pyx_t_15lm_render_state_CColor *__pyx_v_color) {
  unsigned int __pyx_v_ret;
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_color", 0);

  /* "lm_render_state.pyx":50
 * 	out.y3 = a.x3 + m.r0 + a.y3 * m.s1 + m.t1
 * cdef unsigned pack_color(CColor *color):
 * 	cdef unsigned ret = (max(0, min(int(color.r * 255), 255)) << 24) |(max(0, min(int(color.g * 255), 255)) << 16) |(max(0, min(int(color.b * 255), 255)) << 8) | max(0, min(int(color.a * 255), 255))             # <<<<<<<<<<<<<<
 * 	return ret
 * 
 */
  __pyx_t_1 = 255;
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_color->r * 255.0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_4 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_4 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Lshift(__pyx_t_3, __pyx_int_24); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = 255;
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_color->g * 255.0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {
    __pyx_t_7 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_7 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Lshift(__pyx_t_4, __pyx_int_16); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Or(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = 255;
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_color->b * 255.0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {
    __pyx_t_7 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_7 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
  } else {
    __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Lshift(__pyx_t_2, __pyx_int_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Or(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = 255;
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_color->a * 255.0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {
    __pyx_t_7 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_7 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_5 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Or(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_3); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ret = __pyx_t_8;

  /* "lm_render_state.pyx":51
 * cdef unsigned pack_color(CColor *color):
 * 	cdef unsigned ret = (max(0, min(int(color.r * 255), 255)) << 24) |(max(0, min(int(color.g * 255), 255)) << 16) |(max(0, min(int(color.b * 255), 255)) << 8) | max(0, min(int(color.a * 255), 255))
 * 	return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class CRenderer:
 */
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("lm_render_state.pack_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_15lm_render_state_9CRenderer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15lm_render_state_9CRenderer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer___cinit__(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":79
 * 	cdef CRect mask_rect
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._tex_tgt = -1
 * 		self._tex_id = -1
 */

static int __pyx_pf_15lm_render_state_9CRenderer___cinit__(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lm_render_state.pyx":80
 * 
 * 	def __cinit__(self):
 * 		self._tex_tgt = -1             # <<<<<<<<<<<<<<
 * 		self._tex_id = -1
 * 		self._blend_mode = -1
 */
  __pyx_v_self->_tex_tgt = -1;

  /* "lm_render_state.pyx":81
 * 	def __cinit__(self):
 * 		self._tex_tgt = -1
 * 		self._tex_id = -1             # <<<<<<<<<<<<<<
 * 		self._blend_mode = -1
 * 
 */
  __pyx_v_self->_tex_id = -1;

  /* "lm_render_state.pyx":82
 * 		self._tex_tgt = -1
 * 		self._tex_id = -1
 * 		self._blend_mode = -1             # <<<<<<<<<<<<<<
 * 
 * 	cdef void set_blend_mode(self, int idx):
 */
  __pyx_v_self->_blend_mode = -1;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":84
 * 		self._blend_mode = -1
 * 
 * 	cdef void set_blend_mode(self, int idx):             # <<<<<<<<<<<<<<
 * 		gl.Enable(gl.GL_BLEND)
 * 		if 0 <= idx <= 2:
 */

static void __pyx_f_15lm_render_state_9CRenderer_set_blend_mode(CYTHON_UNUSED struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, int __pyx_v_idx) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_blend_mode", 0);

  /* "lm_render_state.pyx":85
 * 
 * 	cdef void set_blend_mode(self, int idx):
 * 		gl.Enable(gl.GL_BLEND)             # <<<<<<<<<<<<<<
 * 		if 0 <= idx <= 2:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__gl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__Enable); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(GL_BLEND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lm_render_state.pyx":86
 * 	cdef void set_blend_mode(self, int idx):
 * 		gl.Enable(gl.GL_BLEND)
 * 		if 0 <= idx <= 2:             # <<<<<<<<<<<<<<
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)
 */
  __pyx_t_4 = (0 <= __pyx_v_idx);
  if (__pyx_t_4) {
    __pyx_t_4 = (__pyx_v_idx <= 2);
  }
  if (__pyx_t_4) {

    /* "lm_render_state.pyx":87
 * 		gl.Enable(gl.GL_BLEND)
 * 		if 0 <= idx <= 2:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)             # <<<<<<<<<<<<<<
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)
 * 		elif idx == 8:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__gl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__glBlendEquationEXT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong(GL_FUNC_ADD); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "lm_render_state.pyx":88
 * 		if 0 <= idx <= 2:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)             # <<<<<<<<<<<<<<
 * 		elif idx == 8:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 */
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    goto __pyx_L3;
  }

  /* "lm_render_state.pyx":89
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)
 * 		elif idx == 8:             # <<<<<<<<<<<<<<
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)
 */
  __pyx_t_4 = (__pyx_v_idx == 8);
  if (__pyx_t_4) {

    /* "lm_render_state.pyx":90
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)
 * 		elif idx == 8:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)             # <<<<<<<<<<<<<<
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)
 * 		elif idx == 9:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__gl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__glBlendEquationEXT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong(GL_FUNC_ADD); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "lm_render_state.pyx":91
 * 		elif idx == 8:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)             # <<<<<<<<<<<<<<
 * 		elif idx == 9:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_REVERSE_SUBTRACT)
 */
    glBlendFunc(GL_SRC_ALPHA, GL_ONE);
    goto __pyx_L3;
  }

  /* "lm_render_state.pyx":92
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_ADD)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)
 * 		elif idx == 9:             # <<<<<<<<<<<<<<
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_REVERSE_SUBTRACT)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)
 */
  __pyx_t_4 = (__pyx_v_idx == 9);
  if (__pyx_t_4) {

    /* "lm_render_state.pyx":93
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)
 * 		elif idx == 9:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_REVERSE_SUBTRACT)             # <<<<<<<<<<<<<<
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__gl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__glBlendEquationEXT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromLong(GL_FUNC_REVERSE_SUBTRACT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "lm_render_state.pyx":94
 * 		elif idx == 9:
 * 			gl.glBlendEquationEXT(gl.GL_FUNC_REVERSE_SUBTRACT)
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)             # <<<<<<<<<<<<<<
 * 
 * 	cdef CMat *get_mat(self):
 */
    glBlendFunc(GL_SRC_ALPHA, GL_ONE);
    goto __pyx_L3;
  }
  __pyx_L3:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("lm_render_state.CRenderer.set_blend_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":96
 * 			gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)
 * 
 * 	cdef CMat *get_mat(self):             # <<<<<<<<<<<<<<
 * 		cdef CMat *mat = self.mat_pool.top()
 * 		self.mat_pool.pop()
 */

static struct __pyx_t_15lm_render_state_CMat *__pyx_f_15lm_render_state_9CRenderer_get_mat(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  struct __pyx_t_15lm_render_state_CMat *__pyx_v_mat;
  struct __pyx_t_15lm_render_state_CMat *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mat", 0);

  /* "lm_render_state.pyx":97
 * 
 * 	cdef CMat *get_mat(self):
 * 		cdef CMat *mat = self.mat_pool.top()             # <<<<<<<<<<<<<<
 * 		self.mat_pool.pop()
 * 		return mat
 */
  __pyx_v_mat = __pyx_v_self->mat_pool.top();

  /* "lm_render_state.pyx":98
 * 	cdef CMat *get_mat(self):
 * 		cdef CMat *mat = self.mat_pool.top()
 * 		self.mat_pool.pop()             # <<<<<<<<<<<<<<
 * 		return mat
 * 
 */
  __pyx_v_self->mat_pool.pop();

  /* "lm_render_state.pyx":99
 * 		cdef CMat *mat = self.mat_pool.top()
 * 		self.mat_pool.pop()
 * 		return mat             # <<<<<<<<<<<<<<
 * 
 * 	cdef CColor *get_cadd(self):
 */
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":101
 * 		return mat
 * 
 * 	cdef CColor *get_cadd(self):             # <<<<<<<<<<<<<<
 * 		cdef CColor *cadd = self.cadd_pool.top()
 * 		self.cadd_pool.pop()
 */

static struct __pyx_t_15lm_render_state_CColor *__pyx_f_15lm_render_state_9CRenderer_get_cadd(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  struct __pyx_t_15lm_render_state_CColor *__pyx_v_cadd;
  struct __pyx_t_15lm_render_state_CColor *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cadd", 0);

  /* "lm_render_state.pyx":102
 * 
 * 	cdef CColor *get_cadd(self):
 * 		cdef CColor *cadd = self.cadd_pool.top()             # <<<<<<<<<<<<<<
 * 		self.cadd_pool.pop()
 * 		return cadd
 */
  __pyx_v_cadd = __pyx_v_self->cadd_pool.top();

  /* "lm_render_state.pyx":103
 * 	cdef CColor *get_cadd(self):
 * 		cdef CColor *cadd = self.cadd_pool.top()
 * 		self.cadd_pool.pop()             # <<<<<<<<<<<<<<
 * 		return cadd
 * 
 */
  __pyx_v_self->cadd_pool.pop();

  /* "lm_render_state.pyx":104
 * 		cdef CColor *cadd = self.cadd_pool.top()
 * 		self.cadd_pool.pop()
 * 		return cadd             # <<<<<<<<<<<<<<
 * 
 * 	cdef CColor *get_cmul(self):
 */
  __pyx_r = __pyx_v_cadd;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":106
 * 		return cadd
 * 
 * 	cdef CColor *get_cmul(self):             # <<<<<<<<<<<<<<
 * 		cdef CColor *cmul = self.cmul_pool.top()
 * 		self.cmul_pool.pop()
 */

static struct __pyx_t_15lm_render_state_CColor *__pyx_f_15lm_render_state_9CRenderer_get_cmul(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  struct __pyx_t_15lm_render_state_CColor *__pyx_v_cmul;
  struct __pyx_t_15lm_render_state_CColor *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cmul", 0);

  /* "lm_render_state.pyx":107
 * 
 * 	cdef CColor *get_cmul(self):
 * 		cdef CColor *cmul = self.cmul_pool.top()             # <<<<<<<<<<<<<<
 * 		self.cmul_pool.pop()
 * 		return cmul
 */
  __pyx_v_cmul = __pyx_v_self->cmul_pool.top();

  /* "lm_render_state.pyx":108
 * 	cdef CColor *get_cmul(self):
 * 		cdef CColor *cmul = self.cmul_pool.top()
 * 		self.cmul_pool.pop()             # <<<<<<<<<<<<<<
 * 		return cmul
 * 
 */
  __pyx_v_self->cmul_pool.pop();

  /* "lm_render_state.pyx":109
 * 		cdef CColor *cmul = self.cmul_pool.top()
 * 		self.cmul_pool.pop()
 * 		return cmul             # <<<<<<<<<<<<<<
 * 
 * 	cdef void del_mat(self, CMat *mat):
 */
  __pyx_r = __pyx_v_cmul;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":111
 * 		return cmul
 * 
 * 	cdef void del_mat(self, CMat *mat):             # <<<<<<<<<<<<<<
 * 		self.mat_pool.push(mat)
 * 
 */

static void __pyx_f_15lm_render_state_9CRenderer_del_mat(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, struct __pyx_t_15lm_render_state_CMat *__pyx_v_mat) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("del_mat", 0);

  /* "lm_render_state.pyx":112
 * 
 * 	cdef void del_mat(self, CMat *mat):
 * 		self.mat_pool.push(mat)             # <<<<<<<<<<<<<<
 * 
 * 	cdef void del_cadd(self, CColor *color):
 */
  __pyx_v_self->mat_pool.push(__pyx_v_mat);

  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":114
 * 		self.mat_pool.push(mat)
 * 
 * 	cdef void del_cadd(self, CColor *color):             # <<<<<<<<<<<<<<
 * 		self.cadd_pool.push(color)
 * 
 */

static void __pyx_f_15lm_render_state_9CRenderer_del_cadd(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, struct __pyx_t_15lm_render_state_CColor *__pyx_v_color) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("del_cadd", 0);

  /* "lm_render_state.pyx":115
 * 
 * 	cdef void del_cadd(self, CColor *color):
 * 		self.cadd_pool.push(color)             # <<<<<<<<<<<<<<
 * 
 * 	cdef void del_cmul(self, CColor *color):
 */
  __pyx_v_self->cadd_pool.push(__pyx_v_color);

  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":117
 * 		self.cadd_pool.push(color)
 * 
 * 	cdef void del_cmul(self, CColor *color):             # <<<<<<<<<<<<<<
 * 		self.cmul_pool.push(color)
 * 
 */

static void __pyx_f_15lm_render_state_9CRenderer_del_cmul(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, struct __pyx_t_15lm_render_state_CColor *__pyx_v_color) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("del_cmul", 0);

  /* "lm_render_state.pyx":118
 * 
 * 	cdef void del_cmul(self, CColor *color):
 * 		self.cmul_pool.push(color)             # <<<<<<<<<<<<<<
 * 
 * 	def init(self):
 */
  __pyx_v_self->cmul_pool.push(__pyx_v_color);

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_3init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_3init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_2init(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":120
 * 		self.cmul_pool.push(color)
 * 
 * 	def init(self):             # <<<<<<<<<<<<<<
 * 		cdef CMat *mat
 * 		cdef CColor *color
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_2init(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  struct __pyx_t_15lm_render_state_CMat *__pyx_v_mat;
  struct __pyx_t_15lm_render_state_CColor *__pyx_v_color;
  int __pyx_v_MAX_DEPTH;
  CYTHON_UNUSED int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  GLenum __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "lm_render_state.pyx":125
 * 
 * 		# allocate temperary result for stacking
 * 		cdef int MAX_DEPTH = 20             # <<<<<<<<<<<<<<
 * 		for i in xrange(MAX_DEPTH):
 * 			self.cadd_pool.push(<CColor *>malloc(sizeof(CColor)))
 */
  __pyx_v_MAX_DEPTH = 20;

  /* "lm_render_state.pyx":126
 * 		# allocate temperary result for stacking
 * 		cdef int MAX_DEPTH = 20
 * 		for i in xrange(MAX_DEPTH):             # <<<<<<<<<<<<<<
 * 			self.cadd_pool.push(<CColor *>malloc(sizeof(CColor)))
 * 			self.cmul_pool.push(<CColor *>malloc(sizeof(CColor)))
 */
  __pyx_t_1 = __pyx_v_MAX_DEPTH;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "lm_render_state.pyx":127
 * 		cdef int MAX_DEPTH = 20
 * 		for i in xrange(MAX_DEPTH):
 * 			self.cadd_pool.push(<CColor *>malloc(sizeof(CColor)))             # <<<<<<<<<<<<<<
 * 			self.cmul_pool.push(<CColor *>malloc(sizeof(CColor)))
 * 			self.mat_pool.push(<CMat *>malloc(sizeof(CMat)))
 */
    __pyx_v_self->cadd_pool.push(((struct __pyx_t_15lm_render_state_CColor *)malloc((sizeof(struct __pyx_t_15lm_render_state_CColor)))));

    /* "lm_render_state.pyx":128
 * 		for i in xrange(MAX_DEPTH):
 * 			self.cadd_pool.push(<CColor *>malloc(sizeof(CColor)))
 * 			self.cmul_pool.push(<CColor *>malloc(sizeof(CColor)))             # <<<<<<<<<<<<<<
 * 			self.mat_pool.push(<CMat *>malloc(sizeof(CMat)))
 * 
 */
    __pyx_v_self->cmul_pool.push(((struct __pyx_t_15lm_render_state_CColor *)malloc((sizeof(struct __pyx_t_15lm_render_state_CColor)))));

    /* "lm_render_state.pyx":129
 * 			self.cadd_pool.push(<CColor *>malloc(sizeof(CColor)))
 * 			self.cmul_pool.push(<CColor *>malloc(sizeof(CColor)))
 * 			self.mat_pool.push(<CMat *>malloc(sizeof(CMat)))             # <<<<<<<<<<<<<<
 * 
 * 		# Enable secondary color
 */
    __pyx_v_self->mat_pool.push(((struct __pyx_t_15lm_render_state_CMat *)malloc((sizeof(struct __pyx_t_15lm_render_state_CMat)))));
  }

  /* "lm_render_state.pyx":132
 * 
 * 		# Enable secondary color
 * 		gl.glEnable(gl.GL_COLOR_SUM_EXT)             # <<<<<<<<<<<<<<
 * 		gl.glEnableClientState(gl.GL_VERTEX_ARRAY)
 * 		gl.glEnableClientState(gl.GL_COLOR_ARRAY)
 */
  glEnable(GL_COLOR_SUM_EXT);

  /* "lm_render_state.pyx":133
 * 		# Enable secondary color
 * 		gl.glEnable(gl.GL_COLOR_SUM_EXT)
 * 		gl.glEnableClientState(gl.GL_VERTEX_ARRAY)             # <<<<<<<<<<<<<<
 * 		gl.glEnableClientState(gl.GL_COLOR_ARRAY)
 * 		gl.glEnableClientState(gl.GL_TEXTURE_COORD_ARRAY)
 */
  glEnableClientState(GL_VERTEX_ARRAY);

  /* "lm_render_state.pyx":134
 * 		gl.glEnable(gl.GL_COLOR_SUM_EXT)
 * 		gl.glEnableClientState(gl.GL_VERTEX_ARRAY)
 * 		gl.glEnableClientState(gl.GL_COLOR_ARRAY)             # <<<<<<<<<<<<<<
 * 		gl.glEnableClientState(gl.GL_TEXTURE_COORD_ARRAY)
 * 		gl.glEnableClientState(gl.GL_SECONDARY_COLOR_ARRAY)
 */
  glEnableClientState(GL_COLOR_ARRAY);

  /* "lm_render_state.pyx":135
 * 		gl.glEnableClientState(gl.GL_VERTEX_ARRAY)
 * 		gl.glEnableClientState(gl.GL_COLOR_ARRAY)
 * 		gl.glEnableClientState(gl.GL_TEXTURE_COORD_ARRAY)             # <<<<<<<<<<<<<<
 * 		gl.glEnableClientState(gl.GL_SECONDARY_COLOR_ARRAY)
 * 
 */
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);

  /* "lm_render_state.pyx":136
 * 		gl.glEnableClientState(gl.GL_COLOR_ARRAY)
 * 		gl.glEnableClientState(gl.GL_TEXTURE_COORD_ARRAY)
 * 		gl.glEnableClientState(gl.GL_SECONDARY_COLOR_ARRAY)             # <<<<<<<<<<<<<<
 * 
 * 		# init state stack
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__gl); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_from_py_GLenum(__pyx_t_4); if (unlikely((__pyx_t_5 == (GLenum)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  glEnableClientState(__pyx_t_5);

  /* "lm_render_state.pyx":139
 * 
 * 		# init state stack
 * 		mat = self.get_mat()             # <<<<<<<<<<<<<<
 * 		mat.t0 = mat.t1 = mat.r0 = mat.r1 = 0.0
 * 		mat.s0 = mat.s1 = 1.0
 */
  __pyx_v_mat = ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->get_mat(__pyx_v_self);

  /* "lm_render_state.pyx":140
 * 		# init state stack
 * 		mat = self.get_mat()
 * 		mat.t0 = mat.t1 = mat.r0 = mat.r1 = 0.0             # <<<<<<<<<<<<<<
 * 		mat.s0 = mat.s1 = 1.0
 * 		self.stk_mat.push(mat)
 */
  __pyx_v_mat->t0 = 0.0;
  __pyx_v_mat->t1 = 0.0;
  __pyx_v_mat->r0 = 0.0;
  __pyx_v_mat->r1 = 0.0;

  /* "lm_render_state.pyx":141
 * 		mat = self.get_mat()
 * 		mat.t0 = mat.t1 = mat.r0 = mat.r1 = 0.0
 * 		mat.s0 = mat.s1 = 1.0             # <<<<<<<<<<<<<<
 * 		self.stk_mat.push(mat)
 * 
 */
  __pyx_v_mat->s0 = 1.0;
  __pyx_v_mat->s1 = 1.0;

  /* "lm_render_state.pyx":142
 * 		mat.t0 = mat.t1 = mat.r0 = mat.r1 = 0.0
 * 		mat.s0 = mat.s1 = 1.0
 * 		self.stk_mat.push(mat)             # <<<<<<<<<<<<<<
 * 
 * 		color = self.get_cadd()
 */
  __pyx_v_self->stk_mat.push(__pyx_v_mat);

  /* "lm_render_state.pyx":144
 * 		self.stk_mat.push(mat)
 * 
 * 		color = self.get_cadd()             # <<<<<<<<<<<<<<
 * 		memset(<void *>color, 0, sizeof(CColor))
 * 		self.stk_cadd.push(color)
 */
  __pyx_v_color = ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->get_cadd(__pyx_v_self);

  /* "lm_render_state.pyx":145
 * 
 * 		color = self.get_cadd()
 * 		memset(<void *>color, 0, sizeof(CColor))             # <<<<<<<<<<<<<<
 * 		self.stk_cadd.push(color)
 * 
 */
  memset(((void *)__pyx_v_color), 0, (sizeof(struct __pyx_t_15lm_render_state_CColor)));

  /* "lm_render_state.pyx":146
 * 		color = self.get_cadd()
 * 		memset(<void *>color, 0, sizeof(CColor))
 * 		self.stk_cadd.push(color)             # <<<<<<<<<<<<<<
 * 
 * 		color = self.get_cmul()
 */
  __pyx_v_self->stk_cadd.push(__pyx_v_color);

  /* "lm_render_state.pyx":148
 * 		self.stk_cadd.push(color)
 * 
 * 		color = self.get_cmul()             # <<<<<<<<<<<<<<
 * 		color.r = color.g = color.b = color.a = 1.0
 * 		self.stk_cmul.push(color)
 */
  __pyx_v_color = ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->get_cmul(__pyx_v_self);

  /* "lm_render_state.pyx":149
 * 
 * 		color = self.get_cmul()
 * 		color.r = color.g = color.b = color.a = 1.0             # <<<<<<<<<<<<<<
 * 		self.stk_cmul.push(color)
 * 
 */
  __pyx_v_color->r = 1.0;
  __pyx_v_color->g = 1.0;
  __pyx_v_color->b = 1.0;
  __pyx_v_color->a = 1.0;

  /* "lm_render_state.pyx":150
 * 		color = self.get_cmul()
 * 		color.r = color.g = color.b = color.a = 1.0
 * 		self.stk_cmul.push(color)             # <<<<<<<<<<<<<<
 * 
 * 		self.stk_blend_mode.push(0)
 */
  __pyx_v_self->stk_cmul.push(__pyx_v_color);

  /* "lm_render_state.pyx":152
 * 		self.stk_cmul.push(color)
 * 
 * 		self.stk_blend_mode.push(0)             # <<<<<<<<<<<<<<
 * 
 * 		self.vbuf_size = 0
 */
  __pyx_v_self->stk_blend_mode.push(0);

  /* "lm_render_state.pyx":154
 * 		self.stk_blend_mode.push(0)
 * 
 * 		self.vbuf_size = 0             # <<<<<<<<<<<<<<
 * 
 * 	def begin(self):
 */
  __pyx_v_self->vbuf_size = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lm_render_state.CRenderer.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_5begin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_5begin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin (wrapper)", 0);
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_4begin(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":156
 * 		self.vbuf_size = 0
 * 
 * 	def begin(self):             # <<<<<<<<<<<<<<
 * 		self._tex_tgt = -1
 * 		self._tex_id = -1
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_4begin(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin", 0);

  /* "lm_render_state.pyx":157
 * 
 * 	def begin(self):
 * 		self._tex_tgt = -1             # <<<<<<<<<<<<<<
 * 		self._tex_id = -1
 * 		self._blend_mode = -1
 */
  __pyx_v_self->_tex_tgt = -1;

  /* "lm_render_state.pyx":158
 * 	def begin(self):
 * 		self._tex_tgt = -1
 * 		self._tex_id = -1             # <<<<<<<<<<<<<<
 * 		self._blend_mode = -1
 * 		self.vbuf_size = 0
 */
  __pyx_v_self->_tex_id = -1;

  /* "lm_render_state.pyx":159
 * 		self._tex_tgt = -1
 * 		self._tex_id = -1
 * 		self._blend_mode = -1             # <<<<<<<<<<<<<<
 * 		self.vbuf_size = 0
 * 		self.mask_active = False
 */
  __pyx_v_self->_blend_mode = -1;

  /* "lm_render_state.pyx":160
 * 		self._tex_id = -1
 * 		self._blend_mode = -1
 * 		self.vbuf_size = 0             # <<<<<<<<<<<<<<
 * 		self.mask_active = False
 * 
 */
  __pyx_v_self->vbuf_size = 0;

  /* "lm_render_state.pyx":161
 * 		self._blend_mode = -1
 * 		self.vbuf_size = 0
 * 		self.mask_active = False             # <<<<<<<<<<<<<<
 * 
 * 	def push_state(self, int cadd_idx, int cmul_idx, int mat_idx, int blend_mode_idx):
 */
  __pyx_v_self->mask_active = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_7push_state(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_7push_state(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cadd_idx;
  int __pyx_v_cmul_idx;
  int __pyx_v_mat_idx;
  int __pyx_v_blend_mode_idx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_state (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cadd_idx,&__pyx_n_s__cmul_idx,&__pyx_n_s__mat_idx,&__pyx_n_s__blend_mode_idx,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cadd_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cmul_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_state", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mat_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_state", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__blend_mode_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_state", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_state") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_cadd_idx = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_cadd_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_cmul_idx = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_cmul_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_mat_idx = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_mat_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_blend_mode_idx = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_blend_mode_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_state", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lm_render_state.CRenderer.push_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_6push_state(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self), __pyx_v_cadd_idx, __pyx_v_cmul_idx, __pyx_v_mat_idx, __pyx_v_blend_mode_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":163
 * 		self.mask_active = False
 * 
 * 	def push_state(self, int cadd_idx, int cmul_idx, int mat_idx, int blend_mode_idx):             # <<<<<<<<<<<<<<
 * 		cdef CColor *color
 * 		cdef CMat *mat
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_6push_state(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, int __pyx_v_cadd_idx, int __pyx_v_cmul_idx, int __pyx_v_mat_idx, int __pyx_v_blend_mode_idx) {
  struct __pyx_t_15lm_render_state_CColor *__pyx_v_color;
  struct __pyx_t_15lm_render_state_CMat *__pyx_v_mat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("push_state", 0);

  /* "lm_render_state.pyx":168
 * 
 * 		# Pushing cxform
 * 		if cadd_idx < 0:             # <<<<<<<<<<<<<<
 * 			self.stk_cadd.push(self.stk_cadd.top())
 * 		else:
 */
  __pyx_t_1 = (__pyx_v_cadd_idx < 0);
  if (__pyx_t_1) {

    /* "lm_render_state.pyx":169
 * 		# Pushing cxform
 * 		if cadd_idx < 0:
 * 			self.stk_cadd.push(self.stk_cadd.top())             # <<<<<<<<<<<<<<
 * 		else:
 * 			color = self.get_cadd()
 */
    __pyx_v_self->stk_cadd.push(__pyx_v_self->stk_cadd.top());
    goto __pyx_L3;
  }
  /*else*/ {

    /* "lm_render_state.pyx":171
 * 			self.stk_cadd.push(self.stk_cadd.top())
 * 		else:
 * 			color = self.get_cadd()             # <<<<<<<<<<<<<<
 * 			color_mul(color, self.vec_color[cadd_idx], self.stk_cmul.top())
 * 			color_add(color, color, self.stk_cadd.top())
 */
    __pyx_v_color = ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->get_cadd(__pyx_v_self);

    /* "lm_render_state.pyx":172
 * 		else:
 * 			color = self.get_cadd()
 * 			color_mul(color, self.vec_color[cadd_idx], self.stk_cmul.top())             # <<<<<<<<<<<<<<
 * 			color_add(color, color, self.stk_cadd.top())
 * 			self.stk_cadd.push(color)
 */
    __pyx_f_15lm_render_state_color_mul(__pyx_v_color, (__pyx_v_self->vec_color[__pyx_v_cadd_idx]), __pyx_v_self->stk_cmul.top());

    /* "lm_render_state.pyx":173
 * 			color = self.get_cadd()
 * 			color_mul(color, self.vec_color[cadd_idx], self.stk_cmul.top())
 * 			color_add(color, color, self.stk_cadd.top())             # <<<<<<<<<<<<<<
 * 			self.stk_cadd.push(color)
 * 		if cmul_idx < 0:
 */
    __pyx_f_15lm_render_state_color_add(__pyx_v_color, __pyx_v_color, __pyx_v_self->stk_cadd.top());

    /* "lm_render_state.pyx":174
 * 			color_mul(color, self.vec_color[cadd_idx], self.stk_cmul.top())
 * 			color_add(color, color, self.stk_cadd.top())
 * 			self.stk_cadd.push(color)             # <<<<<<<<<<<<<<
 * 		if cmul_idx < 0:
 * 			self.stk_cmul.push(self.stk_cmul.top())
 */
    __pyx_v_self->stk_cadd.push(__pyx_v_color);
  }
  __pyx_L3:;

  /* "lm_render_state.pyx":175
 * 			color_add(color, color, self.stk_cadd.top())
 * 			self.stk_cadd.push(color)
 * 		if cmul_idx < 0:             # <<<<<<<<<<<<<<
 * 			self.stk_cmul.push(self.stk_cmul.top())
 * 		else:
 */
  __pyx_t_1 = (__pyx_v_cmul_idx < 0);
  if (__pyx_t_1) {

    /* "lm_render_state.pyx":176
 * 			self.stk_cadd.push(color)
 * 		if cmul_idx < 0:
 * 			self.stk_cmul.push(self.stk_cmul.top())             # <<<<<<<<<<<<<<
 * 		else:
 * 			color = self.get_cmul()
 */
    __pyx_v_self->stk_cmul.push(__pyx_v_self->stk_cmul.top());
    goto __pyx_L4;
  }
  /*else*/ {

    /* "lm_render_state.pyx":178
 * 			self.stk_cmul.push(self.stk_cmul.top())
 * 		else:
 * 			color = self.get_cmul()             # <<<<<<<<<<<<<<
 * 			color_mul(color, self.vec_color[cmul_idx], self.stk_cmul.top())
 * 			self.stk_cmul.push(color)
 */
    __pyx_v_color = ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->get_cmul(__pyx_v_self);

    /* "lm_render_state.pyx":179
 * 		else:
 * 			color = self.get_cmul()
 * 			color_mul(color, self.vec_color[cmul_idx], self.stk_cmul.top())             # <<<<<<<<<<<<<<
 * 			self.stk_cmul.push(color)
 * 
 */
    __pyx_f_15lm_render_state_color_mul(__pyx_v_color, (__pyx_v_self->vec_color[__pyx_v_cmul_idx]), __pyx_v_self->stk_cmul.top());

    /* "lm_render_state.pyx":180
 * 			color = self.get_cmul()
 * 			color_mul(color, self.vec_color[cmul_idx], self.stk_cmul.top())
 * 			self.stk_cmul.push(color)             # <<<<<<<<<<<<<<
 * 
 * 		# Pushing matrix
 */
    __pyx_v_self->stk_cmul.push(__pyx_v_color);
  }
  __pyx_L4:;

  /* "lm_render_state.pyx":183
 * 
 * 		# Pushing matrix
 * 		if mat_idx < 0:             # <<<<<<<<<<<<<<
 * 			self.stk_mat.push(self.stk_mat.top())
 * 		else:
 */
  __pyx_t_1 = (__pyx_v_mat_idx < 0);
  if (__pyx_t_1) {

    /* "lm_render_state.pyx":184
 * 		# Pushing matrix
 * 		if mat_idx < 0:
 * 			self.stk_mat.push(self.stk_mat.top())             # <<<<<<<<<<<<<<
 * 		else:
 * 			mat = self.get_mat()
 */
    __pyx_v_self->stk_mat.push(__pyx_v_self->stk_mat.top());
    goto __pyx_L5;
  }
  /*else*/ {

    /* "lm_render_state.pyx":186
 * 			self.stk_mat.push(self.stk_mat.top())
 * 		else:
 * 			mat = self.get_mat()             # <<<<<<<<<<<<<<
 * 			mat_mul(mat, self.stk_mat.top(), self.vec_mat[mat_idx])
 * 
 */
    __pyx_v_mat = ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->get_mat(__pyx_v_self);

    /* "lm_render_state.pyx":187
 * 		else:
 * 			mat = self.get_mat()
 * 			mat_mul(mat, self.stk_mat.top(), self.vec_mat[mat_idx])             # <<<<<<<<<<<<<<
 * 
 * 		self.stk_blend_mode.push(blend_mode_idx)
 */
    __pyx_f_15lm_render_state_mat_mul(__pyx_v_mat, __pyx_v_self->stk_mat.top(), (__pyx_v_self->vec_mat[__pyx_v_mat_idx]));
  }
  __pyx_L5:;

  /* "lm_render_state.pyx":189
 * 			mat_mul(mat, self.stk_mat.top(), self.vec_mat[mat_idx])
 * 
 * 		self.stk_blend_mode.push(blend_mode_idx)             # <<<<<<<<<<<<<<
 * 
 * 	def pop_state(self):
 */
  __pyx_v_self->stk_blend_mode.push(__pyx_v_blend_mode_idx);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_9pop_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_9pop_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_state (wrapper)", 0);
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_8pop_state(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":191
 * 		self.stk_blend_mode.push(blend_mode_idx)
 * 
 * 	def pop_state(self):             # <<<<<<<<<<<<<<
 * 		cdef CColor *cadd, *cmul
 * 		cdef CMat *mat
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_8pop_state(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  struct __pyx_t_15lm_render_state_CColor *__pyx_v_cadd;
  struct __pyx_t_15lm_render_state_CColor *__pyx_v_cmul;
  struct __pyx_t_15lm_render_state_CMat *__pyx_v_mat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("pop_state", 0);

  /* "lm_render_state.pyx":194
 * 		cdef CColor *cadd, *cmul
 * 		cdef CMat *mat
 * 		cadd = self.stk_cadd.top()             # <<<<<<<<<<<<<<
 * 		cmul = self.stk_cmul.top()
 * 		self.stk_cadd.pop()
 */
  __pyx_v_cadd = __pyx_v_self->stk_cadd.top();

  /* "lm_render_state.pyx":195
 * 		cdef CMat *mat
 * 		cadd = self.stk_cadd.top()
 * 		cmul = self.stk_cmul.top()             # <<<<<<<<<<<<<<
 * 		self.stk_cadd.pop()
 * 		self.stk_cmul.pop()
 */
  __pyx_v_cmul = __pyx_v_self->stk_cmul.top();

  /* "lm_render_state.pyx":196
 * 		cadd = self.stk_cadd.top()
 * 		cmul = self.stk_cmul.top()
 * 		self.stk_cadd.pop()             # <<<<<<<<<<<<<<
 * 		self.stk_cmul.pop()
 * 		mat = self.stk_mat.top()
 */
  __pyx_v_self->stk_cadd.pop();

  /* "lm_render_state.pyx":197
 * 		cmul = self.stk_cmul.top()
 * 		self.stk_cadd.pop()
 * 		self.stk_cmul.pop()             # <<<<<<<<<<<<<<
 * 		mat = self.stk_mat.top()
 * 		self.stk_mat.pop()
 */
  __pyx_v_self->stk_cmul.pop();

  /* "lm_render_state.pyx":198
 * 		self.stk_cadd.pop()
 * 		self.stk_cmul.pop()
 * 		mat = self.stk_mat.top()             # <<<<<<<<<<<<<<
 * 		self.stk_mat.pop()
 * 		self.stk_blend_mode.pop()
 */
  __pyx_v_mat = __pyx_v_self->stk_mat.top();

  /* "lm_render_state.pyx":199
 * 		self.stk_cmul.pop()
 * 		mat = self.stk_mat.top()
 * 		self.stk_mat.pop()             # <<<<<<<<<<<<<<
 * 		self.stk_blend_mode.pop()
 * 
 */
  __pyx_v_self->stk_mat.pop();

  /* "lm_render_state.pyx":200
 * 		mat = self.stk_mat.top()
 * 		self.stk_mat.pop()
 * 		self.stk_blend_mode.pop()             # <<<<<<<<<<<<<<
 * 
 * 		if self.stk_cadd.empty() or cadd != self.stk_cadd.top():
 */
  __pyx_v_self->stk_blend_mode.pop();

  /* "lm_render_state.pyx":202
 * 		self.stk_blend_mode.pop()
 * 
 * 		if self.stk_cadd.empty() or cadd != self.stk_cadd.top():             # <<<<<<<<<<<<<<
 * 			self.del_cadd(cadd)
 * 		if self.stk_cmul.empty() or cmul != self.stk_cmul.top():
 */
  __pyx_t_1 = __pyx_v_self->stk_cadd.empty();
  if (!__pyx_t_1) {
    __pyx_t_2 = (__pyx_v_cadd != __pyx_v_self->stk_cadd.top());
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "lm_render_state.pyx":203
 * 
 * 		if self.stk_cadd.empty() or cadd != self.stk_cadd.top():
 * 			self.del_cadd(cadd)             # <<<<<<<<<<<<<<
 * 		if self.stk_cmul.empty() or cmul != self.stk_cmul.top():
 * 			self.del_cmul(cmul)
 */
    ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->del_cadd(__pyx_v_self, __pyx_v_cadd);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "lm_render_state.pyx":204
 * 		if self.stk_cadd.empty() or cadd != self.stk_cadd.top():
 * 			self.del_cadd(cadd)
 * 		if self.stk_cmul.empty() or cmul != self.stk_cmul.top():             # <<<<<<<<<<<<<<
 * 			self.del_cmul(cmul)
 * 		if self.stk_mat.empty() or mat != self.stk_mat.top():
 */
  __pyx_t_3 = __pyx_v_self->stk_cmul.empty();
  if (!__pyx_t_3) {
    __pyx_t_1 = (__pyx_v_cmul != __pyx_v_self->stk_cmul.top());
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "lm_render_state.pyx":205
 * 			self.del_cadd(cadd)
 * 		if self.stk_cmul.empty() or cmul != self.stk_cmul.top():
 * 			self.del_cmul(cmul)             # <<<<<<<<<<<<<<
 * 		if self.stk_mat.empty() or mat != self.stk_mat.top():
 * 			self.del_mat(mat)
 */
    ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->del_cmul(__pyx_v_self, __pyx_v_cmul);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "lm_render_state.pyx":206
 * 		if self.stk_cmul.empty() or cmul != self.stk_cmul.top():
 * 			self.del_cmul(cmul)
 * 		if self.stk_mat.empty() or mat != self.stk_mat.top():             # <<<<<<<<<<<<<<
 * 			self.del_mat(mat)
 * 
 */
  __pyx_t_2 = __pyx_v_self->stk_mat.empty();
  if (!__pyx_t_2) {
    __pyx_t_3 = (__pyx_v_mat != __pyx_v_self->stk_mat.top());
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "lm_render_state.pyx":207
 * 			self.del_cmul(cmul)
 * 		if self.stk_mat.empty() or mat != self.stk_mat.top():
 * 			self.del_mat(mat)             # <<<<<<<<<<<<<<
 * 
 * 	def set_mask(self, coord_idx):
 */
    ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->del_mat(__pyx_v_self, __pyx_v_mat);
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_11set_mask(PyObject *__pyx_v_self, PyObject *__pyx_v_coord_idx); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_11set_mask(PyObject *__pyx_v_self, PyObject *__pyx_v_coord_idx) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mask (wrapper)", 0);
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_10set_mask(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self), ((PyObject *)__pyx_v_coord_idx));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":209
 * 			self.del_mat(mat)
 * 
 * 	def set_mask(self, coord_idx):             # <<<<<<<<<<<<<<
 * 		cdef CCoords *coord
 * 		cdef CMat *m
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_10set_mask(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, PyObject *__pyx_v_coord_idx) {
  struct __pyx_t_15lm_render_state_CCoords *__pyx_v_coord;
  struct __pyx_t_15lm_render_state_CMat *__pyx_v_m;
  float __pyx_v_xmin;
  float __pyx_v_xmax;
  float __pyx_v_ymin;
  float __pyx_v_ymax;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  size_t __pyx_t_3;
  float __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_mask", 0);

  /* "lm_render_state.pyx":213
 * 		cdef CMat *m
 * 		cdef float xmin, xmax, ymin, ymax
 * 		if coord_idx < 0:             # <<<<<<<<<<<<<<
 * 			self.mask_active = 0
 * 		else:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_coord_idx, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "lm_render_state.pyx":214
 * 		cdef float xmin, xmax, ymin, ymax
 * 		if coord_idx < 0:
 * 			self.mask_active = 0             # <<<<<<<<<<<<<<
 * 		else:
 * 			self.mask_active = 1
 */
    __pyx_v_self->mask_active = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "lm_render_state.pyx":216
 * 			self.mask_active = 0
 * 		else:
 * 			self.mask_active = 1             # <<<<<<<<<<<<<<
 * 			coord = self.vec_coords[coord_idx]
 * 			m = self.stk_mat.top()
 */
    __pyx_v_self->mask_active = 1;

    /* "lm_render_state.pyx":217
 * 		else:
 * 			self.mask_active = 1
 * 			coord = self.vec_coords[coord_idx]             # <<<<<<<<<<<<<<
 * 			m = self.stk_mat.top()
 * 			if coord.x0 < coord.x2:
 */
    __pyx_t_3 = __Pyx_PyInt_AsSize_t(__pyx_v_coord_idx); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_coord = (__pyx_v_self->vec_coords[__pyx_t_3]);

    /* "lm_render_state.pyx":218
 * 			self.mask_active = 1
 * 			coord = self.vec_coords[coord_idx]
 * 			m = self.stk_mat.top()             # <<<<<<<<<<<<<<
 * 			if coord.x0 < coord.x2:
 * 				xmin = coord.x0; xmax = coord.x2;
 */
    __pyx_v_m = __pyx_v_self->stk_mat.top();

    /* "lm_render_state.pyx":219
 * 			coord = self.vec_coords[coord_idx]
 * 			m = self.stk_mat.top()
 * 			if coord.x0 < coord.x2:             # <<<<<<<<<<<<<<
 * 				xmin = coord.x0; xmax = coord.x2;
 * 			else:
 */
    __pyx_t_2 = (__pyx_v_coord->x0 < __pyx_v_coord->x2);
    if (__pyx_t_2) {

      /* "lm_render_state.pyx":220
 * 			m = self.stk_mat.top()
 * 			if coord.x0 < coord.x2:
 * 				xmin = coord.x0; xmax = coord.x2;             # <<<<<<<<<<<<<<
 * 			else:
 * 				xmin = coord.x2; xmax = coord.x0;
 */
      __pyx_t_4 = __pyx_v_coord->x0;
      __pyx_v_xmin = __pyx_t_4;
      __pyx_t_4 = __pyx_v_coord->x2;
      __pyx_v_xmax = __pyx_t_4;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "lm_render_state.pyx":222
 * 				xmin = coord.x0; xmax = coord.x2;
 * 			else:
 * 				xmin = coord.x2; xmax = coord.x0;             # <<<<<<<<<<<<<<
 * 			if coord.y0 < coord.y2:
 * 				ymin = coord.y0; ymax = coord.y2;
 */
      __pyx_t_4 = __pyx_v_coord->x2;
      __pyx_v_xmin = __pyx_t_4;
      __pyx_t_4 = __pyx_v_coord->x0;
      __pyx_v_xmax = __pyx_t_4;
    }
    __pyx_L4:;

    /* "lm_render_state.pyx":223
 * 			else:
 * 				xmin = coord.x2; xmax = coord.x0;
 * 			if coord.y0 < coord.y2:             # <<<<<<<<<<<<<<
 * 				ymin = coord.y0; ymax = coord.y2;
 * 			else:
 */
    __pyx_t_2 = (__pyx_v_coord->y0 < __pyx_v_coord->y2);
    if (__pyx_t_2) {

      /* "lm_render_state.pyx":224
 * 				xmin = coord.x2; xmax = coord.x0;
 * 			if coord.y0 < coord.y2:
 * 				ymin = coord.y0; ymax = coord.y2;             # <<<<<<<<<<<<<<
 * 			else:
 * 				ymin = coord.y2; ymax = coord.y0;
 */
      __pyx_t_4 = __pyx_v_coord->y0;
      __pyx_v_ymin = __pyx_t_4;
      __pyx_t_4 = __pyx_v_coord->y2;
      __pyx_v_ymax = __pyx_t_4;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "lm_render_state.pyx":226
 * 				ymin = coord.y0; ymax = coord.y2;
 * 			else:
 * 				ymin = coord.y2; ymax = coord.y0;             # <<<<<<<<<<<<<<
 * 			self.mask_rect.xmin = xmin * m.s0 + ymin * m.r1 + m.t0
 * 			self.mask_rect.ymin = xmin * m.r0 + ymin * m.s1 + m.t1
 */
      __pyx_t_4 = __pyx_v_coord->y2;
      __pyx_v_ymin = __pyx_t_4;
      __pyx_t_4 = __pyx_v_coord->y0;
      __pyx_v_ymax = __pyx_t_4;
    }
    __pyx_L5:;

    /* "lm_render_state.pyx":227
 * 			else:
 * 				ymin = coord.y2; ymax = coord.y0;
 * 			self.mask_rect.xmin = xmin * m.s0 + ymin * m.r1 + m.t0             # <<<<<<<<<<<<<<
 * 			self.mask_rect.ymin = xmin * m.r0 + ymin * m.s1 + m.t1
 * 			self.mask_rect.xmax = xmax * m.s0 + ymax * m.r1 + m.t0
 */
    __pyx_v_self->mask_rect.xmin = (((__pyx_v_xmin * __pyx_v_m->s0) + (__pyx_v_ymin * __pyx_v_m->r1)) + __pyx_v_m->t0);

    /* "lm_render_state.pyx":228
 * 				ymin = coord.y2; ymax = coord.y0;
 * 			self.mask_rect.xmin = xmin * m.s0 + ymin * m.r1 + m.t0
 * 			self.mask_rect.ymin = xmin * m.r0 + ymin * m.s1 + m.t1             # <<<<<<<<<<<<<<
 * 			self.mask_rect.xmax = xmax * m.s0 + ymax * m.r1 + m.t0
 * 			self.mask_rect.ymax = xmax * m.r0 + ymax * m.s1 + m.t1
 */
    __pyx_v_self->mask_rect.ymin = (((__pyx_v_xmin * __pyx_v_m->r0) + (__pyx_v_ymin * __pyx_v_m->s1)) + __pyx_v_m->t1);

    /* "lm_render_state.pyx":229
 * 			self.mask_rect.xmin = xmin * m.s0 + ymin * m.r1 + m.t0
 * 			self.mask_rect.ymin = xmin * m.r0 + ymin * m.s1 + m.t1
 * 			self.mask_rect.xmax = xmax * m.s0 + ymax * m.r1 + m.t0             # <<<<<<<<<<<<<<
 * 			self.mask_rect.ymax = xmax * m.r0 + ymax * m.s1 + m.t1
 * 
 */
    __pyx_v_self->mask_rect.xmax = (((__pyx_v_xmax * __pyx_v_m->s0) + (__pyx_v_ymax * __pyx_v_m->r1)) + __pyx_v_m->t0);

    /* "lm_render_state.pyx":230
 * 			self.mask_rect.ymin = xmin * m.r0 + ymin * m.s1 + m.t1
 * 			self.mask_rect.xmax = xmax * m.s0 + ymax * m.r1 + m.t0
 * 			self.mask_rect.ymax = xmax * m.r0 + ymax * m.s1 + m.t1             # <<<<<<<<<<<<<<
 * 
 * 	cdef void _append(self, int coords_idx, int tex_coords_idx):
 */
    __pyx_v_self->mask_rect.ymax = (((__pyx_v_xmax * __pyx_v_m->r0) + (__pyx_v_ymax * __pyx_v_m->s1)) + __pyx_v_m->t1);
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lm_render_state.CRenderer.set_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":232
 * 			self.mask_rect.ymax = xmax * m.r0 + ymax * m.s1 + m.t1
 * 
 * 	cdef void _append(self, int coords_idx, int tex_coords_idx):             # <<<<<<<<<<<<<<
 * 		cdef CMat *m = self.stk_mat.top()
 * 		cdef CCoords *coord = self.vec_coords[coords_idx]
 */

static void __pyx_f_15lm_render_state_9CRenderer__append(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, int __pyx_v_coords_idx, int __pyx_v_tex_coords_idx) {
  struct __pyx_t_15lm_render_state_CMat *__pyx_v_m;
  struct __pyx_t_15lm_render_state_CCoords *__pyx_v_coord;
  struct __pyx_t_15lm_render_state_CCoords *__pyx_v_tex_coords;
  int __pyx_v_head;
  unsigned int __pyx_v_cadd;
  unsigned int __pyx_v_cmul;
  struct __pyx_t_15lm_render_state_CCoords __pyx_v_tmp;
  float __pyx_v_stride_u;
  float __pyx_v_stride_v;
  float __pyx_v_stride_x;
  float __pyx_v_stride_y;
  float __pyx_v__fix_x;
  float __pyx_v__fix_y;
  float __pyx_v_u0;
  float __pyx_v_v0;
  float __pyx_v_u1;
  float __pyx_v_v1;
  float __pyx_v_u2;
  float __pyx_v_v2;
  float __pyx_v_u3;
  float __pyx_v_v3;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_append", 0);

  /* "lm_render_state.pyx":233
 * 
 * 	cdef void _append(self, int coords_idx, int tex_coords_idx):
 * 		cdef CMat *m = self.stk_mat.top()             # <<<<<<<<<<<<<<
 * 		cdef CCoords *coord = self.vec_coords[coords_idx]
 * 		cdef CCoords *tex_coords = self.vec_coords[tex_coords_idx]
 */
  __pyx_v_m = __pyx_v_self->stk_mat.top();

  /* "lm_render_state.pyx":234
 * 	cdef void _append(self, int coords_idx, int tex_coords_idx):
 * 		cdef CMat *m = self.stk_mat.top()
 * 		cdef CCoords *coord = self.vec_coords[coords_idx]             # <<<<<<<<<<<<<<
 * 		cdef CCoords *tex_coords = self.vec_coords[tex_coords_idx]
 * 		cdef int head = self.vbuf_size
 */
  __pyx_v_coord = (__pyx_v_self->vec_coords[__pyx_v_coords_idx]);

  /* "lm_render_state.pyx":235
 * 		cdef CMat *m = self.stk_mat.top()
 * 		cdef CCoords *coord = self.vec_coords[coords_idx]
 * 		cdef CCoords *tex_coords = self.vec_coords[tex_coords_idx]             # <<<<<<<<<<<<<<
 * 		cdef int head = self.vbuf_size
 * 		cdef int i
 */
  __pyx_v_tex_coords = (__pyx_v_self->vec_coords[__pyx_v_tex_coords_idx]);

  /* "lm_render_state.pyx":236
 * 		cdef CCoords *coord = self.vec_coords[coords_idx]
 * 		cdef CCoords *tex_coords = self.vec_coords[tex_coords_idx]
 * 		cdef int head = self.vbuf_size             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		cdef unsigned cadd = pack_color(self.stk_cadd.top())
 */
  __pyx_t_1 = __pyx_v_self->vbuf_size;
  __pyx_v_head = __pyx_t_1;

  /* "lm_render_state.pyx":238
 * 		cdef int head = self.vbuf_size
 * 		cdef int i
 * 		cdef unsigned cadd = pack_color(self.stk_cadd.top())             # <<<<<<<<<<<<<<
 * 		cdef unsigned cmul = pack_color(self.stk_cmul.top())
 * 		cdef CCoords tmp
 */
  __pyx_v_cadd = __pyx_f_15lm_render_state_pack_color(__pyx_v_self->stk_cadd.top());

  /* "lm_render_state.pyx":239
 * 		cdef int i
 * 		cdef unsigned cadd = pack_color(self.stk_cadd.top())
 * 		cdef unsigned cmul = pack_color(self.stk_cmul.top())             # <<<<<<<<<<<<<<
 * 		cdef CCoords tmp
 * 		cdef float stride_u, stride_v, stride_x, stride_y, _fix_x, _fix_y
 */
  __pyx_v_cmul = __pyx_f_15lm_render_state_pack_color(__pyx_v_self->stk_cmul.top());

  /* "lm_render_state.pyx":244
 * 		cdef float u0, v0, u1, v1, u2, v2, u3, v3
 * 
 * 		transform_coords(&tmp, coord, m)             # <<<<<<<<<<<<<<
 * 		u0 = tex_coords.x0
 * 		v0 = tex_coords.y0
 */
  __pyx_f_15lm_render_state_transform_coords((&__pyx_v_tmp), __pyx_v_coord, __pyx_v_m);

  /* "lm_render_state.pyx":245
 * 
 * 		transform_coords(&tmp, coord, m)
 * 		u0 = tex_coords.x0             # <<<<<<<<<<<<<<
 * 		v0 = tex_coords.y0
 * 		u1 = tex_coords.x1
 */
  __pyx_t_2 = __pyx_v_tex_coords->x0;
  __pyx_v_u0 = __pyx_t_2;

  /* "lm_render_state.pyx":246
 * 		transform_coords(&tmp, coord, m)
 * 		u0 = tex_coords.x0
 * 		v0 = tex_coords.y0             # <<<<<<<<<<<<<<
 * 		u1 = tex_coords.x1
 * 		v1 = tex_coords.y1
 */
  __pyx_t_2 = __pyx_v_tex_coords->y0;
  __pyx_v_v0 = __pyx_t_2;

  /* "lm_render_state.pyx":247
 * 		u0 = tex_coords.x0
 * 		v0 = tex_coords.y0
 * 		u1 = tex_coords.x1             # <<<<<<<<<<<<<<
 * 		v1 = tex_coords.y1
 * 		u2 = tex_coords.x2
 */
  __pyx_t_2 = __pyx_v_tex_coords->x1;
  __pyx_v_u1 = __pyx_t_2;

  /* "lm_render_state.pyx":248
 * 		v0 = tex_coords.y0
 * 		u1 = tex_coords.x1
 * 		v1 = tex_coords.y1             # <<<<<<<<<<<<<<
 * 		u2 = tex_coords.x2
 * 		v2 = tex_coords.y2
 */
  __pyx_t_2 = __pyx_v_tex_coords->y1;
  __pyx_v_v1 = __pyx_t_2;

  /* "lm_render_state.pyx":249
 * 		u1 = tex_coords.x1
 * 		v1 = tex_coords.y1
 * 		u2 = tex_coords.x2             # <<<<<<<<<<<<<<
 * 		v2 = tex_coords.y2
 * 		u3 = tex_coords.x3
 */
  __pyx_t_2 = __pyx_v_tex_coords->x2;
  __pyx_v_u2 = __pyx_t_2;

  /* "lm_render_state.pyx":250
 * 		v1 = tex_coords.y1
 * 		u2 = tex_coords.x2
 * 		v2 = tex_coords.y2             # <<<<<<<<<<<<<<
 * 		u3 = tex_coords.x3
 * 		v3 = tex_coords.y3
 */
  __pyx_t_2 = __pyx_v_tex_coords->y2;
  __pyx_v_v2 = __pyx_t_2;

  /* "lm_render_state.pyx":251
 * 		u2 = tex_coords.x2
 * 		v2 = tex_coords.y2
 * 		u3 = tex_coords.x3             # <<<<<<<<<<<<<<
 * 		v3 = tex_coords.y3
 * 
 */
  __pyx_t_2 = __pyx_v_tex_coords->x3;
  __pyx_v_u3 = __pyx_t_2;

  /* "lm_render_state.pyx":252
 * 		v2 = tex_coords.y2
 * 		u3 = tex_coords.x3
 * 		v3 = tex_coords.y3             # <<<<<<<<<<<<<<
 * 
 * 		# Fix coords if masked
 */
  __pyx_t_2 = __pyx_v_tex_coords->y3;
  __pyx_v_v3 = __pyx_t_2;

  /* "lm_render_state.pyx":255
 * 
 * 		# Fix coords if masked
 * 		if self.mask_active:             # <<<<<<<<<<<<<<
 * 			stride_u = max(abs(u0 - u1), abs(u1 - u2))
 * 			stride_v = max(abs(v0 - v1), abs(v1 - v2))
 */
  if (__pyx_v_self->mask_active) {

    /* "lm_render_state.pyx":256
 * 		# Fix coords if masked
 * 		if self.mask_active:
 * 			stride_u = max(abs(u0 - u1), abs(u1 - u2))             # <<<<<<<<<<<<<<
 * 			stride_v = max(abs(v0 - v1), abs(v1 - v2))
 * 			stride_x = max(abs(tmp.x0 - tmp.x1), abs(tmp.x1 - tmp.x2))
 */
    __pyx_t_2 = fabsf((__pyx_v_u1 - __pyx_v_u2));
    __pyx_t_3 = fabsf((__pyx_v_u0 - __pyx_v_u1));
    if ((__pyx_t_2 > __pyx_t_3)) {
      __pyx_t_4 = __pyx_t_2;
    } else {
      __pyx_t_4 = __pyx_t_3;
    }
    __pyx_v_stride_u = __pyx_t_4;

    /* "lm_render_state.pyx":257
 * 		if self.mask_active:
 * 			stride_u = max(abs(u0 - u1), abs(u1 - u2))
 * 			stride_v = max(abs(v0 - v1), abs(v1 - v2))             # <<<<<<<<<<<<<<
 * 			stride_x = max(abs(tmp.x0 - tmp.x1), abs(tmp.x1 - tmp.x2))
 * 			stride_y = max(abs(tmp.y0 - tmp.y1), abs(tmp.y1 - tmp.y2))
 */
    __pyx_t_4 = fabsf((__pyx_v_v1 - __pyx_v_v2));
    __pyx_t_2 = fabsf((__pyx_v_v0 - __pyx_v_v1));
    if ((__pyx_t_4 > __pyx_t_2)) {
      __pyx_t_3 = __pyx_t_4;
    } else {
      __pyx_t_3 = __pyx_t_2;
    }
    __pyx_v_stride_v = __pyx_t_3;

    /* "lm_render_state.pyx":258
 * 			stride_u = max(abs(u0 - u1), abs(u1 - u2))
 * 			stride_v = max(abs(v0 - v1), abs(v1 - v2))
 * 			stride_x = max(abs(tmp.x0 - tmp.x1), abs(tmp.x1 - tmp.x2))             # <<<<<<<<<<<<<<
 * 			stride_y = max(abs(tmp.y0 - tmp.y1), abs(tmp.y1 - tmp.y2))
 * 
 */
    __pyx_t_3 = fabsf((__pyx_v_tmp.x1 - __pyx_v_tmp.x2));
    __pyx_t_4 = fabsf((__pyx_v_tmp.x0 - __pyx_v_tmp.x1));
    if ((__pyx_t_3 > __pyx_t_4)) {
      __pyx_t_2 = __pyx_t_3;
    } else {
      __pyx_t_2 = __pyx_t_4;
    }
    __pyx_v_stride_x = __pyx_t_2;

    /* "lm_render_state.pyx":259
 * 			stride_v = max(abs(v0 - v1), abs(v1 - v2))
 * 			stride_x = max(abs(tmp.x0 - tmp.x1), abs(tmp.x1 - tmp.x2))
 * 			stride_y = max(abs(tmp.y0 - tmp.y1), abs(tmp.y1 - tmp.y2))             # <<<<<<<<<<<<<<
 * 
 * 			_fix_x = stride_u / stride_x
 */
    __pyx_t_2 = fabsf((__pyx_v_tmp.y1 - __pyx_v_tmp.y2));
    __pyx_t_3 = fabsf((__pyx_v_tmp.y0 - __pyx_v_tmp.y1));
    if ((__pyx_t_2 > __pyx_t_3)) {
      __pyx_t_4 = __pyx_t_2;
    } else {
      __pyx_t_4 = __pyx_t_3;
    }
    __pyx_v_stride_y = __pyx_t_4;

    /* "lm_render_state.pyx":261
 * 			stride_y = max(abs(tmp.y0 - tmp.y1), abs(tmp.y1 - tmp.y2))
 * 
 * 			_fix_x = stride_u / stride_x             # <<<<<<<<<<<<<<
 * 			_fix_y = stride_v / stride_y
 * 
 */
    if (unlikely(__pyx_v_stride_x == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "float division");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v__fix_x = (__pyx_v_stride_u / __pyx_v_stride_x);

    /* "lm_render_state.pyx":262
 * 
 * 			_fix_x = stride_u / stride_x
 * 			_fix_y = stride_v / stride_y             # <<<<<<<<<<<<<<
 * 
 * 			if tmp.x0 < self.mask_rect.xmin:
 */
    if (unlikely(__pyx_v_stride_y == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "float division");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v__fix_y = (__pyx_v_stride_v / __pyx_v_stride_y);

    /* "lm_render_state.pyx":264
 * 			_fix_y = stride_v / stride_y
 * 
 * 			if tmp.x0 < self.mask_rect.xmin:             # <<<<<<<<<<<<<<
 * 				u0 += (self.mask_rect.xmin - tmp.x0) * _fix_x; tmp.x0 = self.mask_rect.xmin
 * 			elif tmp.x0 > self.mask_rect.xmax:
 */
    __pyx_t_5 = (__pyx_v_tmp.x0 < __pyx_v_self->mask_rect.xmin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":265
 * 
 * 			if tmp.x0 < self.mask_rect.xmin:
 * 				u0 += (self.mask_rect.xmin - tmp.x0) * _fix_x; tmp.x0 = self.mask_rect.xmin             # <<<<<<<<<<<<<<
 * 			elif tmp.x0 > self.mask_rect.xmax:
 * 				u0 -= (tmp.x0 - self.mask_rect.xmax) * _fix_x; tmp.x0 = self.mask_rect.xmax
 */
      __pyx_v_u0 = (__pyx_v_u0 + ((__pyx_v_self->mask_rect.xmin - __pyx_v_tmp.x0) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmin;
      __pyx_v_tmp.x0 = __pyx_t_4;
      goto __pyx_L4;
    }

    /* "lm_render_state.pyx":266
 * 			if tmp.x0 < self.mask_rect.xmin:
 * 				u0 += (self.mask_rect.xmin - tmp.x0) * _fix_x; tmp.x0 = self.mask_rect.xmin
 * 			elif tmp.x0 > self.mask_rect.xmax:             # <<<<<<<<<<<<<<
 * 				u0 -= (tmp.x0 - self.mask_rect.xmax) * _fix_x; tmp.x0 = self.mask_rect.xmax
 * 			if tmp.x1 < self.mask_rect.xmin:
 */
    __pyx_t_5 = (__pyx_v_tmp.x0 > __pyx_v_self->mask_rect.xmax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":267
 * 				u0 += (self.mask_rect.xmin - tmp.x0) * _fix_x; tmp.x0 = self.mask_rect.xmin
 * 			elif tmp.x0 > self.mask_rect.xmax:
 * 				u0 -= (tmp.x0 - self.mask_rect.xmax) * _fix_x; tmp.x0 = self.mask_rect.xmax             # <<<<<<<<<<<<<<
 * 			if tmp.x1 < self.mask_rect.xmin:
 * 				u1 += (self.mask_rect.xmin - tmp.x1) * _fix_x; tmp.x1 = self.mask_rect.xmin
 */
      __pyx_v_u0 = (__pyx_v_u0 - ((__pyx_v_tmp.x0 - __pyx_v_self->mask_rect.xmax) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmax;
      __pyx_v_tmp.x0 = __pyx_t_4;
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "lm_render_state.pyx":268
 * 			elif tmp.x0 > self.mask_rect.xmax:
 * 				u0 -= (tmp.x0 - self.mask_rect.xmax) * _fix_x; tmp.x0 = self.mask_rect.xmax
 * 			if tmp.x1 < self.mask_rect.xmin:             # <<<<<<<<<<<<<<
 * 				u1 += (self.mask_rect.xmin - tmp.x1) * _fix_x; tmp.x1 = self.mask_rect.xmin
 * 			elif tmp.x1 > self.mask_rect.xmax:
 */
    __pyx_t_5 = (__pyx_v_tmp.x1 < __pyx_v_self->mask_rect.xmin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":269
 * 				u0 -= (tmp.x0 - self.mask_rect.xmax) * _fix_x; tmp.x0 = self.mask_rect.xmax
 * 			if tmp.x1 < self.mask_rect.xmin:
 * 				u1 += (self.mask_rect.xmin - tmp.x1) * _fix_x; tmp.x1 = self.mask_rect.xmin             # <<<<<<<<<<<<<<
 * 			elif tmp.x1 > self.mask_rect.xmax:
 * 				u1 -= (tmp.x1 - self.mask_rect.xmax) * _fix_x; tmp.x1 = self.mask_rect.xmax
 */
      __pyx_v_u1 = (__pyx_v_u1 + ((__pyx_v_self->mask_rect.xmin - __pyx_v_tmp.x1) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmin;
      __pyx_v_tmp.x1 = __pyx_t_4;
      goto __pyx_L5;
    }

    /* "lm_render_state.pyx":270
 * 			if tmp.x1 < self.mask_rect.xmin:
 * 				u1 += (self.mask_rect.xmin - tmp.x1) * _fix_x; tmp.x1 = self.mask_rect.xmin
 * 			elif tmp.x1 > self.mask_rect.xmax:             # <<<<<<<<<<<<<<
 * 				u1 -= (tmp.x1 - self.mask_rect.xmax) * _fix_x; tmp.x1 = self.mask_rect.xmax
 * 			if tmp.x2 < self.mask_rect.xmin:
 */
    __pyx_t_5 = (__pyx_v_tmp.x1 > __pyx_v_self->mask_rect.xmax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":271
 * 				u1 += (self.mask_rect.xmin - tmp.x1) * _fix_x; tmp.x1 = self.mask_rect.xmin
 * 			elif tmp.x1 > self.mask_rect.xmax:
 * 				u1 -= (tmp.x1 - self.mask_rect.xmax) * _fix_x; tmp.x1 = self.mask_rect.xmax             # <<<<<<<<<<<<<<
 * 			if tmp.x2 < self.mask_rect.xmin:
 * 				u2 += (self.mask_rect.xmin - tmp.x2) * _fix_x; tmp.x2 = self.mask_rect.xmin
 */
      __pyx_v_u1 = (__pyx_v_u1 - ((__pyx_v_tmp.x1 - __pyx_v_self->mask_rect.xmax) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmax;
      __pyx_v_tmp.x1 = __pyx_t_4;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "lm_render_state.pyx":272
 * 			elif tmp.x1 > self.mask_rect.xmax:
 * 				u1 -= (tmp.x1 - self.mask_rect.xmax) * _fix_x; tmp.x1 = self.mask_rect.xmax
 * 			if tmp.x2 < self.mask_rect.xmin:             # <<<<<<<<<<<<<<
 * 				u2 += (self.mask_rect.xmin - tmp.x2) * _fix_x; tmp.x2 = self.mask_rect.xmin
 * 			elif tmp.x2 > self.mask_rect.xmax:
 */
    __pyx_t_5 = (__pyx_v_tmp.x2 < __pyx_v_self->mask_rect.xmin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":273
 * 				u1 -= (tmp.x1 - self.mask_rect.xmax) * _fix_x; tmp.x1 = self.mask_rect.xmax
 * 			if tmp.x2 < self.mask_rect.xmin:
 * 				u2 += (self.mask_rect.xmin - tmp.x2) * _fix_x; tmp.x2 = self.mask_rect.xmin             # <<<<<<<<<<<<<<
 * 			elif tmp.x2 > self.mask_rect.xmax:
 * 				u2 -= (tmp.x2 - self.mask_rect.xmax) * _fix_x; tmp.x2 = self.mask_rect.xmax
 */
      __pyx_v_u2 = (__pyx_v_u2 + ((__pyx_v_self->mask_rect.xmin - __pyx_v_tmp.x2) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmin;
      __pyx_v_tmp.x2 = __pyx_t_4;
      goto __pyx_L6;
    }

    /* "lm_render_state.pyx":274
 * 			if tmp.x2 < self.mask_rect.xmin:
 * 				u2 += (self.mask_rect.xmin - tmp.x2) * _fix_x; tmp.x2 = self.mask_rect.xmin
 * 			elif tmp.x2 > self.mask_rect.xmax:             # <<<<<<<<<<<<<<
 * 				u2 -= (tmp.x2 - self.mask_rect.xmax) * _fix_x; tmp.x2 = self.mask_rect.xmax
 * 			if tmp.x3 < self.mask_rect.xmin:
 */
    __pyx_t_5 = (__pyx_v_tmp.x2 > __pyx_v_self->mask_rect.xmax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":275
 * 				u2 += (self.mask_rect.xmin - tmp.x2) * _fix_x; tmp.x2 = self.mask_rect.xmin
 * 			elif tmp.x2 > self.mask_rect.xmax:
 * 				u2 -= (tmp.x2 - self.mask_rect.xmax) * _fix_x; tmp.x2 = self.mask_rect.xmax             # <<<<<<<<<<<<<<
 * 			if tmp.x3 < self.mask_rect.xmin:
 * 				u3 += (self.mask_rect.xmin - tmp.x3) * _fix_x; tmp.x3 = self.mask_rect.xmin
 */
      __pyx_v_u2 = (__pyx_v_u2 - ((__pyx_v_tmp.x2 - __pyx_v_self->mask_rect.xmax) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmax;
      __pyx_v_tmp.x2 = __pyx_t_4;
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "lm_render_state.pyx":276
 * 			elif tmp.x2 > self.mask_rect.xmax:
 * 				u2 -= (tmp.x2 - self.mask_rect.xmax) * _fix_x; tmp.x2 = self.mask_rect.xmax
 * 			if tmp.x3 < self.mask_rect.xmin:             # <<<<<<<<<<<<<<
 * 				u3 += (self.mask_rect.xmin - tmp.x3) * _fix_x; tmp.x3 = self.mask_rect.xmin
 * 			elif tmp.x3 > self.mask_rect.xmax:
 */
    __pyx_t_5 = (__pyx_v_tmp.x3 < __pyx_v_self->mask_rect.xmin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":277
 * 				u2 -= (tmp.x2 - self.mask_rect.xmax) * _fix_x; tmp.x2 = self.mask_rect.xmax
 * 			if tmp.x3 < self.mask_rect.xmin:
 * 				u3 += (self.mask_rect.xmin - tmp.x3) * _fix_x; tmp.x3 = self.mask_rect.xmin             # <<<<<<<<<<<<<<
 * 			elif tmp.x3 > self.mask_rect.xmax:
 * 				u3 -= (tmp.x3 - self.mask_rect.xmax) * _fix_x; tmp.x3 = self.mask_rect.xmax
 */
      __pyx_v_u3 = (__pyx_v_u3 + ((__pyx_v_self->mask_rect.xmin - __pyx_v_tmp.x3) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmin;
      __pyx_v_tmp.x3 = __pyx_t_4;
      goto __pyx_L7;
    }

    /* "lm_render_state.pyx":278
 * 			if tmp.x3 < self.mask_rect.xmin:
 * 				u3 += (self.mask_rect.xmin - tmp.x3) * _fix_x; tmp.x3 = self.mask_rect.xmin
 * 			elif tmp.x3 > self.mask_rect.xmax:             # <<<<<<<<<<<<<<
 * 				u3 -= (tmp.x3 - self.mask_rect.xmax) * _fix_x; tmp.x3 = self.mask_rect.xmax
 * 
 */
    __pyx_t_5 = (__pyx_v_tmp.x3 > __pyx_v_self->mask_rect.xmax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":279
 * 				u3 += (self.mask_rect.xmin - tmp.x3) * _fix_x; tmp.x3 = self.mask_rect.xmin
 * 			elif tmp.x3 > self.mask_rect.xmax:
 * 				u3 -= (tmp.x3 - self.mask_rect.xmax) * _fix_x; tmp.x3 = self.mask_rect.xmax             # <<<<<<<<<<<<<<
 * 
 * 			if tmp.y0 < self.mask_rect.ymin:
 */
      __pyx_v_u3 = (__pyx_v_u3 - ((__pyx_v_tmp.x3 - __pyx_v_self->mask_rect.xmax) * __pyx_v__fix_x));
      __pyx_t_4 = __pyx_v_self->mask_rect.xmax;
      __pyx_v_tmp.x3 = __pyx_t_4;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "lm_render_state.pyx":281
 * 				u3 -= (tmp.x3 - self.mask_rect.xmax) * _fix_x; tmp.x3 = self.mask_rect.xmax
 * 
 * 			if tmp.y0 < self.mask_rect.ymin:             # <<<<<<<<<<<<<<
 * 				v0 -= (self.mask_rect.ymin - tmp.y0) * _fix_y; tmp.y0 = self.mask_rect.ymin
 * 			elif tmp.y0 > self.mask_rect.ymax:
 */
    __pyx_t_5 = (__pyx_v_tmp.y0 < __pyx_v_self->mask_rect.ymin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":282
 * 
 * 			if tmp.y0 < self.mask_rect.ymin:
 * 				v0 -= (self.mask_rect.ymin - tmp.y0) * _fix_y; tmp.y0 = self.mask_rect.ymin             # <<<<<<<<<<<<<<
 * 			elif tmp.y0 > self.mask_rect.ymax:
 * 				v0 += (tmp.y0 - self.mask_rect.ymax) * _fix_y; tmp.y0 = self.mask_rect.ymax
 */
      __pyx_v_v0 = (__pyx_v_v0 - ((__pyx_v_self->mask_rect.ymin - __pyx_v_tmp.y0) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymin;
      __pyx_v_tmp.y0 = __pyx_t_4;
      goto __pyx_L8;
    }

    /* "lm_render_state.pyx":283
 * 			if tmp.y0 < self.mask_rect.ymin:
 * 				v0 -= (self.mask_rect.ymin - tmp.y0) * _fix_y; tmp.y0 = self.mask_rect.ymin
 * 			elif tmp.y0 > self.mask_rect.ymax:             # <<<<<<<<<<<<<<
 * 				v0 += (tmp.y0 - self.mask_rect.ymax) * _fix_y; tmp.y0 = self.mask_rect.ymax
 * 			if tmp.y1 < self.mask_rect.ymin:
 */
    __pyx_t_5 = (__pyx_v_tmp.y0 > __pyx_v_self->mask_rect.ymax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":284
 * 				v0 -= (self.mask_rect.ymin - tmp.y0) * _fix_y; tmp.y0 = self.mask_rect.ymin
 * 			elif tmp.y0 > self.mask_rect.ymax:
 * 				v0 += (tmp.y0 - self.mask_rect.ymax) * _fix_y; tmp.y0 = self.mask_rect.ymax             # <<<<<<<<<<<<<<
 * 			if tmp.y1 < self.mask_rect.ymin:
 * 				v1 -= (self.mask_rect.ymin - tmp.y1) * _fix_y; tmp.y1 = self.mask_rect.ymin
 */
      __pyx_v_v0 = (__pyx_v_v0 + ((__pyx_v_tmp.y0 - __pyx_v_self->mask_rect.ymax) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymax;
      __pyx_v_tmp.y0 = __pyx_t_4;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "lm_render_state.pyx":285
 * 			elif tmp.y0 > self.mask_rect.ymax:
 * 				v0 += (tmp.y0 - self.mask_rect.ymax) * _fix_y; tmp.y0 = self.mask_rect.ymax
 * 			if tmp.y1 < self.mask_rect.ymin:             # <<<<<<<<<<<<<<
 * 				v1 -= (self.mask_rect.ymin - tmp.y1) * _fix_y; tmp.y1 = self.mask_rect.ymin
 * 			elif tmp.y1 > self.mask_rect.ymax:
 */
    __pyx_t_5 = (__pyx_v_tmp.y1 < __pyx_v_self->mask_rect.ymin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":286
 * 				v0 += (tmp.y0 - self.mask_rect.ymax) * _fix_y; tmp.y0 = self.mask_rect.ymax
 * 			if tmp.y1 < self.mask_rect.ymin:
 * 				v1 -= (self.mask_rect.ymin - tmp.y1) * _fix_y; tmp.y1 = self.mask_rect.ymin             # <<<<<<<<<<<<<<
 * 			elif tmp.y1 > self.mask_rect.ymax:
 * 				v1 += (tmp.y1 - self.mask_rect.ymax) * _fix_y; tmp.y1 = self.mask_rect.ymax
 */
      __pyx_v_v1 = (__pyx_v_v1 - ((__pyx_v_self->mask_rect.ymin - __pyx_v_tmp.y1) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymin;
      __pyx_v_tmp.y1 = __pyx_t_4;
      goto __pyx_L9;
    }

    /* "lm_render_state.pyx":287
 * 			if tmp.y1 < self.mask_rect.ymin:
 * 				v1 -= (self.mask_rect.ymin - tmp.y1) * _fix_y; tmp.y1 = self.mask_rect.ymin
 * 			elif tmp.y1 > self.mask_rect.ymax:             # <<<<<<<<<<<<<<
 * 				v1 += (tmp.y1 - self.mask_rect.ymax) * _fix_y; tmp.y1 = self.mask_rect.ymax
 * 			if tmp.y2 < self.mask_rect.ymin:
 */
    __pyx_t_5 = (__pyx_v_tmp.y1 > __pyx_v_self->mask_rect.ymax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":288
 * 				v1 -= (self.mask_rect.ymin - tmp.y1) * _fix_y; tmp.y1 = self.mask_rect.ymin
 * 			elif tmp.y1 > self.mask_rect.ymax:
 * 				v1 += (tmp.y1 - self.mask_rect.ymax) * _fix_y; tmp.y1 = self.mask_rect.ymax             # <<<<<<<<<<<<<<
 * 			if tmp.y2 < self.mask_rect.ymin:
 * 				v2 -= (self.mask_rect.ymin - tmp.y2) * _fix_y; tmp.y2 = self.mask_rect.ymin
 */
      __pyx_v_v1 = (__pyx_v_v1 + ((__pyx_v_tmp.y1 - __pyx_v_self->mask_rect.ymax) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymax;
      __pyx_v_tmp.y1 = __pyx_t_4;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "lm_render_state.pyx":289
 * 			elif tmp.y1 > self.mask_rect.ymax:
 * 				v1 += (tmp.y1 - self.mask_rect.ymax) * _fix_y; tmp.y1 = self.mask_rect.ymax
 * 			if tmp.y2 < self.mask_rect.ymin:             # <<<<<<<<<<<<<<
 * 				v2 -= (self.mask_rect.ymin - tmp.y2) * _fix_y; tmp.y2 = self.mask_rect.ymin
 * 			elif tmp.y2 > self.mask_rect.ymax:
 */
    __pyx_t_5 = (__pyx_v_tmp.y2 < __pyx_v_self->mask_rect.ymin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":290
 * 				v1 += (tmp.y1 - self.mask_rect.ymax) * _fix_y; tmp.y1 = self.mask_rect.ymax
 * 			if tmp.y2 < self.mask_rect.ymin:
 * 				v2 -= (self.mask_rect.ymin - tmp.y2) * _fix_y; tmp.y2 = self.mask_rect.ymin             # <<<<<<<<<<<<<<
 * 			elif tmp.y2 > self.mask_rect.ymax:
 * 				v2 += (tmp.y2 - self.mask_rect.ymax) * _fix_y; tmp.y2 = self.mask_rect.ymax
 */
      __pyx_v_v2 = (__pyx_v_v2 - ((__pyx_v_self->mask_rect.ymin - __pyx_v_tmp.y2) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymin;
      __pyx_v_tmp.y2 = __pyx_t_4;
      goto __pyx_L10;
    }

    /* "lm_render_state.pyx":291
 * 			if tmp.y2 < self.mask_rect.ymin:
 * 				v2 -= (self.mask_rect.ymin - tmp.y2) * _fix_y; tmp.y2 = self.mask_rect.ymin
 * 			elif tmp.y2 > self.mask_rect.ymax:             # <<<<<<<<<<<<<<
 * 				v2 += (tmp.y2 - self.mask_rect.ymax) * _fix_y; tmp.y2 = self.mask_rect.ymax
 * 			if tmp.y3 < self.mask_rect.ymin:
 */
    __pyx_t_5 = (__pyx_v_tmp.y2 > __pyx_v_self->mask_rect.ymax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":292
 * 				v2 -= (self.mask_rect.ymin - tmp.y2) * _fix_y; tmp.y2 = self.mask_rect.ymin
 * 			elif tmp.y2 > self.mask_rect.ymax:
 * 				v2 += (tmp.y2 - self.mask_rect.ymax) * _fix_y; tmp.y2 = self.mask_rect.ymax             # <<<<<<<<<<<<<<
 * 			if tmp.y3 < self.mask_rect.ymin:
 * 				v3 -= (self.mask_rect.ymin - tmp.y3) * _fix_y; tmp.y3 = self.mask_rect.ymin
 */
      __pyx_v_v2 = (__pyx_v_v2 + ((__pyx_v_tmp.y2 - __pyx_v_self->mask_rect.ymax) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymax;
      __pyx_v_tmp.y2 = __pyx_t_4;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "lm_render_state.pyx":293
 * 			elif tmp.y2 > self.mask_rect.ymax:
 * 				v2 += (tmp.y2 - self.mask_rect.ymax) * _fix_y; tmp.y2 = self.mask_rect.ymax
 * 			if tmp.y3 < self.mask_rect.ymin:             # <<<<<<<<<<<<<<
 * 				v3 -= (self.mask_rect.ymin - tmp.y3) * _fix_y; tmp.y3 = self.mask_rect.ymin
 * 			elif tmp.y3 > self.mask_rect.ymax:
 */
    __pyx_t_5 = (__pyx_v_tmp.y3 < __pyx_v_self->mask_rect.ymin);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":294
 * 				v2 += (tmp.y2 - self.mask_rect.ymax) * _fix_y; tmp.y2 = self.mask_rect.ymax
 * 			if tmp.y3 < self.mask_rect.ymin:
 * 				v3 -= (self.mask_rect.ymin - tmp.y3) * _fix_y; tmp.y3 = self.mask_rect.ymin             # <<<<<<<<<<<<<<
 * 			elif tmp.y3 > self.mask_rect.ymax:
 * 				v3 += (tmp.y3 - self.mask_rect.ymax) * _fix_y; tmp.y3 = self.mask_rect.ymax
 */
      __pyx_v_v3 = (__pyx_v_v3 - ((__pyx_v_self->mask_rect.ymin - __pyx_v_tmp.y3) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymin;
      __pyx_v_tmp.y3 = __pyx_t_4;
      goto __pyx_L11;
    }

    /* "lm_render_state.pyx":295
 * 			if tmp.y3 < self.mask_rect.ymin:
 * 				v3 -= (self.mask_rect.ymin - tmp.y3) * _fix_y; tmp.y3 = self.mask_rect.ymin
 * 			elif tmp.y3 > self.mask_rect.ymax:             # <<<<<<<<<<<<<<
 * 				v3 += (tmp.y3 - self.mask_rect.ymax) * _fix_y; tmp.y3 = self.mask_rect.ymax
 * 
 */
    __pyx_t_5 = (__pyx_v_tmp.y3 > __pyx_v_self->mask_rect.ymax);
    if (__pyx_t_5) {

      /* "lm_render_state.pyx":296
 * 				v3 -= (self.mask_rect.ymin - tmp.y3) * _fix_y; tmp.y3 = self.mask_rect.ymin
 * 			elif tmp.y3 > self.mask_rect.ymax:
 * 				v3 += (tmp.y3 - self.mask_rect.ymax) * _fix_y; tmp.y3 = self.mask_rect.ymax             # <<<<<<<<<<<<<<
 * 
 * 		self.vbuf[head].x = tmp.x0
 */
      __pyx_v_v3 = (__pyx_v_v3 + ((__pyx_v_tmp.y3 - __pyx_v_self->mask_rect.ymax) * __pyx_v__fix_y));
      __pyx_t_4 = __pyx_v_self->mask_rect.ymax;
      __pyx_v_tmp.y3 = __pyx_t_4;
      goto __pyx_L11;
    }
    __pyx_L11:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "lm_render_state.pyx":298
 * 				v3 += (tmp.y3 - self.mask_rect.ymax) * _fix_y; tmp.y3 = self.mask_rect.ymax
 * 
 * 		self.vbuf[head].x = tmp.x0             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].y = tmp.y0
 * 		self.vbuf[head].u = u0
 */
  __pyx_t_4 = __pyx_v_tmp.x0;
  (__pyx_v_self->vbuf[__pyx_v_head]).x = __pyx_t_4;

  /* "lm_render_state.pyx":299
 * 
 * 		self.vbuf[head].x = tmp.x0
 * 		self.vbuf[head].y = tmp.y0             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].u = u0
 * 		self.vbuf[head].v = v0
 */
  __pyx_t_4 = __pyx_v_tmp.y0;
  (__pyx_v_self->vbuf[__pyx_v_head]).y = __pyx_t_4;

  /* "lm_render_state.pyx":300
 * 		self.vbuf[head].x = tmp.x0
 * 		self.vbuf[head].y = tmp.y0
 * 		self.vbuf[head].u = u0             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].v = v0
 * 		self.vbuf[head].color = cmul
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).u = __pyx_v_u0;

  /* "lm_render_state.pyx":301
 * 		self.vbuf[head].y = tmp.y0
 * 		self.vbuf[head].u = u0
 * 		self.vbuf[head].v = v0             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).v = __pyx_v_v0;

  /* "lm_render_state.pyx":302
 * 		self.vbuf[head].u = u0
 * 		self.vbuf[head].v = v0
 * 		self.vbuf[head].color = cmul             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].secondary_color = cadd
 * 
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).color = __pyx_v_cmul;

  /* "lm_render_state.pyx":303
 * 		self.vbuf[head].v = v0
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd             # <<<<<<<<<<<<<<
 * 
 * 		head += 1
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).secondary_color = __pyx_v_cadd;

  /* "lm_render_state.pyx":305
 * 		self.vbuf[head].secondary_color = cadd
 * 
 * 		head += 1             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].x = tmp.x1
 * 		self.vbuf[head].y = tmp.y1
 */
  __pyx_v_head = (__pyx_v_head + 1);

  /* "lm_render_state.pyx":306
 * 
 * 		head += 1
 * 		self.vbuf[head].x = tmp.x1             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].y = tmp.y1
 * 		self.vbuf[head].u = u1
 */
  __pyx_t_4 = __pyx_v_tmp.x1;
  (__pyx_v_self->vbuf[__pyx_v_head]).x = __pyx_t_4;

  /* "lm_render_state.pyx":307
 * 		head += 1
 * 		self.vbuf[head].x = tmp.x1
 * 		self.vbuf[head].y = tmp.y1             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].u = u1
 * 		self.vbuf[head].v = v1
 */
  __pyx_t_4 = __pyx_v_tmp.y1;
  (__pyx_v_self->vbuf[__pyx_v_head]).y = __pyx_t_4;

  /* "lm_render_state.pyx":308
 * 		self.vbuf[head].x = tmp.x1
 * 		self.vbuf[head].y = tmp.y1
 * 		self.vbuf[head].u = u1             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].v = v1
 * 		self.vbuf[head].color = cmul
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).u = __pyx_v_u1;

  /* "lm_render_state.pyx":309
 * 		self.vbuf[head].y = tmp.y1
 * 		self.vbuf[head].u = u1
 * 		self.vbuf[head].v = v1             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).v = __pyx_v_v1;

  /* "lm_render_state.pyx":310
 * 		self.vbuf[head].u = u1
 * 		self.vbuf[head].v = v1
 * 		self.vbuf[head].color = cmul             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].secondary_color = cadd
 * 
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).color = __pyx_v_cmul;

  /* "lm_render_state.pyx":311
 * 		self.vbuf[head].v = v1
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd             # <<<<<<<<<<<<<<
 * 
 * 		head += 1
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).secondary_color = __pyx_v_cadd;

  /* "lm_render_state.pyx":313
 * 		self.vbuf[head].secondary_color = cadd
 * 
 * 		head += 1             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].x = tmp.x2
 * 		self.vbuf[head].y = tmp.y2
 */
  __pyx_v_head = (__pyx_v_head + 1);

  /* "lm_render_state.pyx":314
 * 
 * 		head += 1
 * 		self.vbuf[head].x = tmp.x2             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].y = tmp.y2
 * 		self.vbuf[head].u = u2
 */
  __pyx_t_4 = __pyx_v_tmp.x2;
  (__pyx_v_self->vbuf[__pyx_v_head]).x = __pyx_t_4;

  /* "lm_render_state.pyx":315
 * 		head += 1
 * 		self.vbuf[head].x = tmp.x2
 * 		self.vbuf[head].y = tmp.y2             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].u = u2
 * 		self.vbuf[head].v = v2
 */
  __pyx_t_4 = __pyx_v_tmp.y2;
  (__pyx_v_self->vbuf[__pyx_v_head]).y = __pyx_t_4;

  /* "lm_render_state.pyx":316
 * 		self.vbuf[head].x = tmp.x2
 * 		self.vbuf[head].y = tmp.y2
 * 		self.vbuf[head].u = u2             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].v = v2
 * 		self.vbuf[head].color = cmul
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).u = __pyx_v_u2;

  /* "lm_render_state.pyx":317
 * 		self.vbuf[head].y = tmp.y2
 * 		self.vbuf[head].u = u2
 * 		self.vbuf[head].v = v2             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).v = __pyx_v_v2;

  /* "lm_render_state.pyx":318
 * 		self.vbuf[head].u = u2
 * 		self.vbuf[head].v = v2
 * 		self.vbuf[head].color = cmul             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].secondary_color = cadd
 * 
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).color = __pyx_v_cmul;

  /* "lm_render_state.pyx":319
 * 		self.vbuf[head].v = v2
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd             # <<<<<<<<<<<<<<
 * 
 * 		head += 1
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).secondary_color = __pyx_v_cadd;

  /* "lm_render_state.pyx":321
 * 		self.vbuf[head].secondary_color = cadd
 * 
 * 		head += 1             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].x = tmp.x3
 * 		self.vbuf[head].y = tmp.y3
 */
  __pyx_v_head = (__pyx_v_head + 1);

  /* "lm_render_state.pyx":322
 * 
 * 		head += 1
 * 		self.vbuf[head].x = tmp.x3             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].y = tmp.y3
 * 		self.vbuf[head].u = u3
 */
  __pyx_t_4 = __pyx_v_tmp.x3;
  (__pyx_v_self->vbuf[__pyx_v_head]).x = __pyx_t_4;

  /* "lm_render_state.pyx":323
 * 		head += 1
 * 		self.vbuf[head].x = tmp.x3
 * 		self.vbuf[head].y = tmp.y3             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].u = u3
 * 		self.vbuf[head].v = v3
 */
  __pyx_t_4 = __pyx_v_tmp.y3;
  (__pyx_v_self->vbuf[__pyx_v_head]).y = __pyx_t_4;

  /* "lm_render_state.pyx":324
 * 		self.vbuf[head].x = tmp.x3
 * 		self.vbuf[head].y = tmp.y3
 * 		self.vbuf[head].u = u3             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].v = v3
 * 		self.vbuf[head].color = cmul
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).u = __pyx_v_u3;

  /* "lm_render_state.pyx":325
 * 		self.vbuf[head].y = tmp.y3
 * 		self.vbuf[head].u = u3
 * 		self.vbuf[head].v = v3             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).v = __pyx_v_v3;

  /* "lm_render_state.pyx":326
 * 		self.vbuf[head].u = u3
 * 		self.vbuf[head].v = v3
 * 		self.vbuf[head].color = cmul             # <<<<<<<<<<<<<<
 * 		self.vbuf[head].secondary_color = cadd
 * 
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).color = __pyx_v_cmul;

  /* "lm_render_state.pyx":327
 * 		self.vbuf[head].v = v3
 * 		self.vbuf[head].color = cmul
 * 		self.vbuf[head].secondary_color = cadd             # <<<<<<<<<<<<<<
 * 
 * 		self.vbuf_head += 4
 */
  (__pyx_v_self->vbuf[__pyx_v_head]).secondary_color = __pyx_v_cadd;

  /* "lm_render_state.pyx":329
 * 		self.vbuf[head].secondary_color = cadd
 * 
 * 		self.vbuf_head += 4             # <<<<<<<<<<<<<<
 * 
 * 	cdef void _update_contex(self):
 */
  __pyx_t_6 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__vbuf_head); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_6, __pyx_int_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__vbuf_head, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("lm_render_state.CRenderer._append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":331
 * 		self.vbuf_head += 4
 * 
 * 	cdef void _update_contex(self):             # <<<<<<<<<<<<<<
 * 		if self._is_tex_dirty:
 * 			gl.glEnable(self._tex_tgt)
 */

static void __pyx_f_15lm_render_state_9CRenderer__update_contex(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_contex", 0);

  /* "lm_render_state.pyx":332
 * 
 * 	cdef void _update_contex(self):
 * 		if self._is_tex_dirty:             # <<<<<<<<<<<<<<
 * 			gl.glEnable(self._tex_tgt)
 * 			gl.glBindTexture(self._tex_tgt, self._tex_id)
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s___is_tex_dirty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "lm_render_state.pyx":333
 * 	cdef void _update_contex(self):
 * 		if self._is_tex_dirty:
 * 			gl.glEnable(self._tex_tgt)             # <<<<<<<<<<<<<<
 * 			gl.glBindTexture(self._tex_tgt, self._tex_id)
 * 			self._is_tex_dirty = False
 */
    glEnable(__pyx_v_self->_tex_tgt);

    /* "lm_render_state.pyx":334
 * 		if self._is_tex_dirty:
 * 			gl.glEnable(self._tex_tgt)
 * 			gl.glBindTexture(self._tex_tgt, self._tex_id)             # <<<<<<<<<<<<<<
 * 			self._is_tex_dirty = False
 * 
 */
    glBindTexture(__pyx_v_self->_tex_tgt, __pyx_v_self->_tex_id);

    /* "lm_render_state.pyx":335
 * 			gl.glEnable(self._tex_tgt)
 * 			gl.glBindTexture(self._tex_tgt, self._tex_id)
 * 			self._is_tex_dirty = False             # <<<<<<<<<<<<<<
 * 
 * 		if self._is_blend_mode_dirty:
 */
    __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_n_s___is_tex_dirty, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "lm_render_state.pyx":337
 * 			self._is_tex_dirty = False
 * 
 * 		if self._is_blend_mode_dirty:             # <<<<<<<<<<<<<<
 * 			self.set_blend_mode(self._blend_mode)
 * 			self._is_blend_mode_dirty = False
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "lm_render_state.pyx":338
 * 
 * 		if self._is_blend_mode_dirty:
 * 			self.set_blend_mode(self._blend_mode)             # <<<<<<<<<<<<<<
 * 			self._is_blend_mode_dirty = False
 * 
 */
    ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->set_blend_mode(__pyx_v_self, __pyx_v_self->_blend_mode);

    /* "lm_render_state.pyx":339
 * 		if self._is_blend_mode_dirty:
 * 			self.set_blend_mode(self._blend_mode)
 * 			self._is_blend_mode_dirty = False             # <<<<<<<<<<<<<<
 * 
 * 	cdef void _flush(self):
 */
    __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("lm_render_state.CRenderer._update_contex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "lm_render_state.pyx":341
 * 			self._is_blend_mode_dirty = False
 * 
 * 	cdef void _flush(self):             # <<<<<<<<<<<<<<
 * 		cdef int stride
 * 		if self.vbuf_head > 0:
 */

static void __pyx_f_15lm_render_state_9CRenderer__flush(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self) {
  int __pyx_v_stride;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  GLsizei __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_flush", 0);

  /* "lm_render_state.pyx":343
 * 	cdef void _flush(self):
 * 		cdef int stride
 * 		if self.vbuf_head > 0:             # <<<<<<<<<<<<<<
 * 			self._update_contex()
 * 			stride = sizeof(CVertexData)
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__vbuf_head); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "lm_render_state.pyx":344
 * 		cdef int stride
 * 		if self.vbuf_head > 0:
 * 			self._update_contex()             # <<<<<<<<<<<<<<
 * 			stride = sizeof(CVertexData)
 * 			gl.glVertexPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].x)
 */
    ((struct __pyx_vtabstruct_15lm_render_state_CRenderer *)__pyx_v_self->__pyx_vtab)->_update_contex(__pyx_v_self);

    /* "lm_render_state.pyx":345
 * 		if self.vbuf_head > 0:
 * 			self._update_contex()
 * 			stride = sizeof(CVertexData)             # <<<<<<<<<<<<<<
 * 			gl.glVertexPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].x)
 * 			gl.glTexCoordPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].u)
 */
    __pyx_v_stride = (sizeof(struct __pyx_t_15lm_render_state_CVertexData));

    /* "lm_render_state.pyx":346
 * 			self._update_contex()
 * 			stride = sizeof(CVertexData)
 * 			gl.glVertexPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].x)             # <<<<<<<<<<<<<<
 * 			gl.glTexCoordPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].u)
 * 			gl.glColorPointer(4, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].color)
 */
    glVertexPointer(2, GL_FLOAT, __pyx_v_stride, (&(__pyx_v_self->vbuf[0]).x));

    /* "lm_render_state.pyx":347
 * 			stride = sizeof(CVertexData)
 * 			gl.glVertexPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].x)
 * 			gl.glTexCoordPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].u)             # <<<<<<<<<<<<<<
 * 			gl.glColorPointer(4, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].color)
 * 			gl.glSecondaryColorPointerEXT(3, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].secondary_color)
 */
    glTexCoordPointer(2, GL_FLOAT, __pyx_v_stride, (&(__pyx_v_self->vbuf[0]).u));

    /* "lm_render_state.pyx":348
 * 			gl.glVertexPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].x)
 * 			gl.glTexCoordPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].u)
 * 			gl.glColorPointer(4, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].color)             # <<<<<<<<<<<<<<
 * 			gl.glSecondaryColorPointerEXT(3, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].secondary_color)
 * 			gl.glDrawArrays(gl.GL_QUADS, 0, self.vbuf_head)
 */
    glColorPointer(4, GL_UNSIGNED_BYTE, __pyx_v_stride, (&(__pyx_v_self->vbuf[0]).color));

    /* "lm_render_state.pyx":349
 * 			gl.glTexCoordPointer(2, gl.GL_FLOAT, stride, &self.vbuf[0].u)
 * 			gl.glColorPointer(4, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].color)
 * 			gl.glSecondaryColorPointerEXT(3, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].secondary_color)             # <<<<<<<<<<<<<<
 * 			gl.glDrawArrays(gl.GL_QUADS, 0, self.vbuf_head)
 * 			self.vbuf_head = 0
 */
    glSecondaryColorPointerEXT(3, GL_UNSIGNED_BYTE, __pyx_v_stride, (&(__pyx_v_self->vbuf[0]).secondary_color));

    /* "lm_render_state.pyx":350
 * 			gl.glColorPointer(4, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].color)
 * 			gl.glSecondaryColorPointerEXT(3, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].secondary_color)
 * 			gl.glDrawArrays(gl.GL_QUADS, 0, self.vbuf_head)             # <<<<<<<<<<<<<<
 * 			self.vbuf_head = 0
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__vbuf_head); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_from_py_GLsizei(__pyx_t_2); if (unlikely((__pyx_t_4 == (GLsizei)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    glDrawArrays(GL_QUADS, 0, __pyx_t_4);

    /* "lm_render_state.pyx":351
 * 			gl.glSecondaryColorPointerEXT(3, gl.GL_UNSIGNED_BYTE, stride, &self.vbuf[0].secondary_color)
 * 			gl.glDrawArrays(gl.GL_QUADS, 0, self.vbuf_head)
 * 			self.vbuf_head = 0             # <<<<<<<<<<<<<<
 * 
 * 	def draw_image(self, tex_tgt, tex_id, coord_idx, tex_coord_idx):
 */
    if (PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__vbuf_head, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("lm_render_state.CRenderer._flush", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_13draw_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_13draw_image(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_tex_tgt = 0;
  CYTHON_UNUSED PyObject *__pyx_v_tex_id = 0;
  CYTHON_UNUSED PyObject *__pyx_v_coord_idx = 0;
  CYTHON_UNUSED PyObject *__pyx_v_tex_coord_idx = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("draw_image (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__tex_tgt,&__pyx_n_s__tex_id,&__pyx_n_s__coord_idx,&__pyx_n_s__tex_coord_idx,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tex_tgt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tex_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("draw_image", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__coord_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("draw_image", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tex_coord_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("draw_image", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "draw_image") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_tex_tgt = values[0];
    __pyx_v_tex_id = values[1];
    __pyx_v_coord_idx = values[2];
    __pyx_v_tex_coord_idx = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("draw_image", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lm_render_state.CRenderer.draw_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_12draw_image(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self), __pyx_v_tex_tgt, __pyx_v_tex_id, __pyx_v_coord_idx, __pyx_v_tex_coord_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":353
 * 			self.vbuf_head = 0
 * 
 * 	def draw_image(self, tex_tgt, tex_id, coord_idx, tex_coord_idx):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_12draw_image(CYTHON_UNUSED struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_tex_tgt, CYTHON_UNUSED PyObject *__pyx_v_tex_id, CYTHON_UNUSED PyObject *__pyx_v_coord_idx, CYTHON_UNUSED PyObject *__pyx_v_tex_coord_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("draw_image", 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_15reg_pos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_15reg_pos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_x;
  float __pyx_v_y;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reg_pos (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_pos", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reg_pos") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reg_pos", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_14reg_pos(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self), __pyx_v_x, __pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":393
 * 	# Preloading all rendering data
 * 	####################################
 * 	def reg_pos(self, float x, float y):             # <<<<<<<<<<<<<<
 * 		cdef CPos *pos = <CPos *>malloc(sizeof(CPos))
 * 		pos.x = x
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_14reg_pos(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_x, float __pyx_v_y) {
  struct __pyx_t_15lm_render_state_CPos *__pyx_v_pos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reg_pos", 0);

  /* "lm_render_state.pyx":394
 * 	####################################
 * 	def reg_pos(self, float x, float y):
 * 		cdef CPos *pos = <CPos *>malloc(sizeof(CPos))             # <<<<<<<<<<<<<<
 * 		pos.x = x
 * 		pos.y = y
 */
  __pyx_v_pos = ((struct __pyx_t_15lm_render_state_CPos *)malloc((sizeof(struct __pyx_t_15lm_render_state_CPos))));

  /* "lm_render_state.pyx":395
 * 	def reg_pos(self, float x, float y):
 * 		cdef CPos *pos = <CPos *>malloc(sizeof(CPos))
 * 		pos.x = x             # <<<<<<<<<<<<<<
 * 		pos.y = y
 * 		self.vec_pos.push_back(pos)
 */
  __pyx_v_pos->x = __pyx_v_x;

  /* "lm_render_state.pyx":396
 * 		cdef CPos *pos = <CPos *>malloc(sizeof(CPos))
 * 		pos.x = x
 * 		pos.y = y             # <<<<<<<<<<<<<<
 * 		self.vec_pos.push_back(pos)
 * 		return self.vec_pos.size() - 1
 */
  __pyx_v_pos->y = __pyx_v_y;

  /* "lm_render_state.pyx":397
 * 		pos.x = x
 * 		pos.y = y
 * 		self.vec_pos.push_back(pos)             # <<<<<<<<<<<<<<
 * 		return self.vec_pos.size() - 1
 * 
 */
  __pyx_v_self->vec_pos.push_back(__pyx_v_pos);

  /* "lm_render_state.pyx":398
 * 		pos.y = y
 * 		self.vec_pos.push_back(pos)
 * 		return self.vec_pos.size() - 1             # <<<<<<<<<<<<<<
 * 
 * 	def reg_color(self, float r, float g, float b, float a):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->vec_pos.size() - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_17reg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_17reg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reg_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__r,&__pyx_n_s__g,&__pyx_n_s__b,&__pyx_n_s__a,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_color", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_color", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_color", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reg_color") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reg_color", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_16reg_color(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self), __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":400
 * 		return self.vec_pos.size() - 1
 * 
 * 	def reg_color(self, float r, float g, float b, float a):             # <<<<<<<<<<<<<<
 * 		cdef CColor *color = <CColor *>malloc(sizeof(CColor))
 * 		color.r = r
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_16reg_color(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  struct __pyx_t_15lm_render_state_CColor *__pyx_v_color;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reg_color", 0);

  /* "lm_render_state.pyx":401
 * 
 * 	def reg_color(self, float r, float g, float b, float a):
 * 		cdef CColor *color = <CColor *>malloc(sizeof(CColor))             # <<<<<<<<<<<<<<
 * 		color.r = r
 * 		color.g = g
 */
  __pyx_v_color = ((struct __pyx_t_15lm_render_state_CColor *)malloc((sizeof(struct __pyx_t_15lm_render_state_CColor))));

  /* "lm_render_state.pyx":402
 * 	def reg_color(self, float r, float g, float b, float a):
 * 		cdef CColor *color = <CColor *>malloc(sizeof(CColor))
 * 		color.r = r             # <<<<<<<<<<<<<<
 * 		color.g = g
 * 		color.b = b
 */
  __pyx_v_color->r = __pyx_v_r;

  /* "lm_render_state.pyx":403
 * 		cdef CColor *color = <CColor *>malloc(sizeof(CColor))
 * 		color.r = r
 * 		color.g = g             # <<<<<<<<<<<<<<
 * 		color.b = b
 * 		color.a = a
 */
  __pyx_v_color->g = __pyx_v_g;

  /* "lm_render_state.pyx":404
 * 		color.r = r
 * 		color.g = g
 * 		color.b = b             # <<<<<<<<<<<<<<
 * 		color.a = a
 * 		self.vec_color.push_back(color)
 */
  __pyx_v_color->b = __pyx_v_b;

  /* "lm_render_state.pyx":405
 * 		color.g = g
 * 		color.b = b
 * 		color.a = a             # <<<<<<<<<<<<<<
 * 		self.vec_color.push_back(color)
 * 		return self.vec_color.size() - 1
 */
  __pyx_v_color->a = __pyx_v_a;

  /* "lm_render_state.pyx":406
 * 		color.b = b
 * 		color.a = a
 * 		self.vec_color.push_back(color)             # <<<<<<<<<<<<<<
 * 		return self.vec_color.size() - 1
 * 
 */
  __pyx_v_self->vec_color.push_back(__pyx_v_color);

  /* "lm_render_state.pyx":407
 * 		color.a = a
 * 		self.vec_color.push_back(color)
 * 		return self.vec_color.size() - 1             # <<<<<<<<<<<<<<
 * 
 * 	def reg_mat(self, float t0, float t1, float s0, float s1, float r0, float r1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->vec_color.size() - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_19reg_mat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_19reg_mat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_t0;
  float __pyx_v_t1;
  float __pyx_v_s0;
  float __pyx_v_s1;
  float __pyx_v_r0;
  float __pyx_v_r1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reg_mat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__t0,&__pyx_n_s__t1,&__pyx_n_s__s0,&__pyx_n_s__s1,&__pyx_n_s__r0,&__pyx_n_s__r1,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__t0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__t1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_mat", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_mat", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_mat", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__r0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_mat", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_mat", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reg_mat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_t0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_t0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_t1 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_t1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_s0 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_s0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_s1 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_s1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_r0 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_r0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_r1 = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_r1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reg_mat", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_mat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_18reg_mat(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self), __pyx_v_t0, __pyx_v_t1, __pyx_v_s0, __pyx_v_s1, __pyx_v_r0, __pyx_v_r1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":409
 * 		return self.vec_color.size() - 1
 * 
 * 	def reg_mat(self, float t0, float t1, float s0, float s1, float r0, float r1):             # <<<<<<<<<<<<<<
 * 		cdef CMat *mat = <CMat *>malloc(sizeof(CMat))
 * 		mat.t0 = t0
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_18reg_mat(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_t0, float __pyx_v_t1, float __pyx_v_s0, float __pyx_v_s1, float __pyx_v_r0, float __pyx_v_r1) {
  struct __pyx_t_15lm_render_state_CMat *__pyx_v_mat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reg_mat", 0);

  /* "lm_render_state.pyx":410
 * 
 * 	def reg_mat(self, float t0, float t1, float s0, float s1, float r0, float r1):
 * 		cdef CMat *mat = <CMat *>malloc(sizeof(CMat))             # <<<<<<<<<<<<<<
 * 		mat.t0 = t0
 * 		mat.t1 = t1
 */
  __pyx_v_mat = ((struct __pyx_t_15lm_render_state_CMat *)malloc((sizeof(struct __pyx_t_15lm_render_state_CMat))));

  /* "lm_render_state.pyx":411
 * 	def reg_mat(self, float t0, float t1, float s0, float s1, float r0, float r1):
 * 		cdef CMat *mat = <CMat *>malloc(sizeof(CMat))
 * 		mat.t0 = t0             # <<<<<<<<<<<<<<
 * 		mat.t1 = t1
 * 		mat.s0 = s0
 */
  __pyx_v_mat->t0 = __pyx_v_t0;

  /* "lm_render_state.pyx":412
 * 		cdef CMat *mat = <CMat *>malloc(sizeof(CMat))
 * 		mat.t0 = t0
 * 		mat.t1 = t1             # <<<<<<<<<<<<<<
 * 		mat.s0 = s0
 * 		mat.s1 = s1
 */
  __pyx_v_mat->t1 = __pyx_v_t1;

  /* "lm_render_state.pyx":413
 * 		mat.t0 = t0
 * 		mat.t1 = t1
 * 		mat.s0 = s0             # <<<<<<<<<<<<<<
 * 		mat.s1 = s1
 * 		mat.r0 = r0
 */
  __pyx_v_mat->s0 = __pyx_v_s0;

  /* "lm_render_state.pyx":414
 * 		mat.t1 = t1
 * 		mat.s0 = s0
 * 		mat.s1 = s1             # <<<<<<<<<<<<<<
 * 		mat.r0 = r0
 * 		mat.r1 = r1
 */
  __pyx_v_mat->s1 = __pyx_v_s1;

  /* "lm_render_state.pyx":415
 * 		mat.s0 = s0
 * 		mat.s1 = s1
 * 		mat.r0 = r0             # <<<<<<<<<<<<<<
 * 		mat.r1 = r1
 * 		self.vec_mat.push_back(mat)
 */
  __pyx_v_mat->r0 = __pyx_v_r0;

  /* "lm_render_state.pyx":416
 * 		mat.s1 = s1
 * 		mat.r0 = r0
 * 		mat.r1 = r1             # <<<<<<<<<<<<<<
 * 		self.vec_mat.push_back(mat)
 * 		return self.vec_mat.size() - 1
 */
  __pyx_v_mat->r1 = __pyx_v_r1;

  /* "lm_render_state.pyx":417
 * 		mat.r0 = r0
 * 		mat.r1 = r1
 * 		self.vec_mat.push_back(mat)             # <<<<<<<<<<<<<<
 * 		return self.vec_mat.size() - 1
 * 
 */
  __pyx_v_self->vec_mat.push_back(__pyx_v_mat);

  /* "lm_render_state.pyx":418
 * 		mat.r1 = r1
 * 		self.vec_mat.push_back(mat)
 * 		return self.vec_mat.size() - 1             # <<<<<<<<<<<<<<
 * 
 * 	def reg_coords(self, float x0, float y0, float x1, float y1, float x2,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->vec_mat.size() - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_mat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_21reg_coords(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15lm_render_state_9CRenderer_21reg_coords(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_x0;
  float __pyx_v_y0;
  float __pyx_v_x1;
  float __pyx_v_y1;
  float __pyx_v_x2;
  float __pyx_v_y2;
  float __pyx_v_x3;
  float __pyx_v_y3;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reg_coords (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x0,&__pyx_n_s__y0,&__pyx_n_s__x1,&__pyx_n_s__y1,&__pyx_n_s__x2,&__pyx_n_s__y2,&__pyx_n_s__x3,&__pyx_n_s__y3,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reg_coords") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_x0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_x0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_y0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_x1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y1 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_y1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x2 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_x2 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y2 = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_y2 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x3 = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_x3 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y3 = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_y3 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reg_coords", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_coords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15lm_render_state_9CRenderer_20reg_coords(((struct __pyx_obj_15lm_render_state_CRenderer *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_x1, __pyx_v_y1, __pyx_v_x2, __pyx_v_y2, __pyx_v_x3, __pyx_v_y3);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lm_render_state.pyx":420
 * 		return self.vec_mat.size() - 1
 * 
 * 	def reg_coords(self, float x0, float y0, float x1, float y1, float x2,             # <<<<<<<<<<<<<<
 * 						   float y2, float x3, float y3):
 * 		cdef CCoords *coords = <CCoords *>malloc(sizeof(CCoords))
 */

static PyObject *__pyx_pf_15lm_render_state_9CRenderer_20reg_coords(struct __pyx_obj_15lm_render_state_CRenderer *__pyx_v_self, float __pyx_v_x0, float __pyx_v_y0, float __pyx_v_x1, float __pyx_v_y1, float __pyx_v_x2, float __pyx_v_y2, float __pyx_v_x3, float __pyx_v_y3) {
  struct __pyx_t_15lm_render_state_CCoords *__pyx_v_coords;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reg_coords", 0);

  /* "lm_render_state.pyx":422
 * 	def reg_coords(self, float x0, float y0, float x1, float y1, float x2,
 * 						   float y2, float x3, float y3):
 * 		cdef CCoords *coords = <CCoords *>malloc(sizeof(CCoords))             # <<<<<<<<<<<<<<
 * 		coords.x0 = x0
 * 		coords.y0 = y0
 */
  __pyx_v_coords = ((struct __pyx_t_15lm_render_state_CCoords *)malloc((sizeof(struct __pyx_t_15lm_render_state_CCoords))));

  /* "lm_render_state.pyx":423
 * 						   float y2, float x3, float y3):
 * 		cdef CCoords *coords = <CCoords *>malloc(sizeof(CCoords))
 * 		coords.x0 = x0             # <<<<<<<<<<<<<<
 * 		coords.y0 = y0
 * 		coords.x1 = x1
 */
  __pyx_v_coords->x0 = __pyx_v_x0;

  /* "lm_render_state.pyx":424
 * 		cdef CCoords *coords = <CCoords *>malloc(sizeof(CCoords))
 * 		coords.x0 = x0
 * 		coords.y0 = y0             # <<<<<<<<<<<<<<
 * 		coords.x1 = x1
 * 		coords.y1 = y1
 */
  __pyx_v_coords->y0 = __pyx_v_y0;

  /* "lm_render_state.pyx":425
 * 		coords.x0 = x0
 * 		coords.y0 = y0
 * 		coords.x1 = x1             # <<<<<<<<<<<<<<
 * 		coords.y1 = y1
 * 		coords.x2 = x2
 */
  __pyx_v_coords->x1 = __pyx_v_x1;

  /* "lm_render_state.pyx":426
 * 		coords.y0 = y0
 * 		coords.x1 = x1
 * 		coords.y1 = y1             # <<<<<<<<<<<<<<
 * 		coords.x2 = x2
 * 		coords.y2 = y2
 */
  __pyx_v_coords->y1 = __pyx_v_y1;

  /* "lm_render_state.pyx":427
 * 		coords.x1 = x1
 * 		coords.y1 = y1
 * 		coords.x2 = x2             # <<<<<<<<<<<<<<
 * 		coords.y2 = y2
 * 		coords.x3 = x3
 */
  __pyx_v_coords->x2 = __pyx_v_x2;

  /* "lm_render_state.pyx":428
 * 		coords.y1 = y1
 * 		coords.x2 = x2
 * 		coords.y2 = y2             # <<<<<<<<<<<<<<
 * 		coords.x3 = x3
 * 		coords.y3 = y3
 */
  __pyx_v_coords->y2 = __pyx_v_y2;

  /* "lm_render_state.pyx":429
 * 		coords.x2 = x2
 * 		coords.y2 = y2
 * 		coords.x3 = x3             # <<<<<<<<<<<<<<
 * 		coords.y3 = y3
 * 		self.vec_coords.push_back(coords)
 */
  __pyx_v_coords->x3 = __pyx_v_x3;

  /* "lm_render_state.pyx":430
 * 		coords.y2 = y2
 * 		coords.x3 = x3
 * 		coords.y3 = y3             # <<<<<<<<<<<<<<
 * 		self.vec_coords.push_back(coords)
 * 		return self.vec_coords.size() - 1
 */
  __pyx_v_coords->y3 = __pyx_v_y3;

  /* "lm_render_state.pyx":431
 * 		coords.x3 = x3
 * 		coords.y3 = y3
 * 		self.vec_coords.push_back(coords)             # <<<<<<<<<<<<<<
 * 		return self.vec_coords.size() - 1
 * 
 */
  __pyx_v_self->vec_coords.push_back(__pyx_v_coords);

  /* "lm_render_state.pyx":432
 * 		coords.y3 = y3
 * 		self.vec_coords.push_back(coords)
 * 		return self.vec_coords.size() - 1             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->vec_coords.size() - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lm_render_state.CRenderer.reg_coords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_15lm_render_state_CRenderer __pyx_vtable_15lm_render_state_CRenderer;

static PyObject *__pyx_tp_new_15lm_render_state_CRenderer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_15lm_render_state_CRenderer *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_15lm_render_state_CRenderer *)o);
  p->__pyx_vtab = __pyx_vtabptr_15lm_render_state_CRenderer;
  new((void*)&(p->vec_mat)) std::vector<struct __pyx_t_15lm_render_state_CMat *>();
  new((void*)&(p->vec_pos)) std::vector<struct __pyx_t_15lm_render_state_CPos *>();
  new((void*)&(p->vec_color)) std::vector<struct __pyx_t_15lm_render_state_CColor *>();
  new((void*)&(p->vec_coords)) std::vector<struct __pyx_t_15lm_render_state_CCoords *>();
  new((void*)&(p->stk_cadd)) std::stack<struct __pyx_t_15lm_render_state_CColor *>();
  new((void*)&(p->stk_cmul)) std::stack<struct __pyx_t_15lm_render_state_CColor *>();
  new((void*)&(p->stk_mat)) std::stack<struct __pyx_t_15lm_render_state_CMat *>();
  new((void*)&(p->stk_blend_mode)) std::stack<int>();
  new((void*)&(p->cadd_pool)) std::stack<struct __pyx_t_15lm_render_state_CColor *>();
  new((void*)&(p->cmul_pool)) std::stack<struct __pyx_t_15lm_render_state_CColor *>();
  new((void*)&(p->mat_pool)) std::stack<struct __pyx_t_15lm_render_state_CMat *>();
  if (__pyx_pw_15lm_render_state_9CRenderer_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_15lm_render_state_CRenderer(PyObject *o) {
  struct __pyx_obj_15lm_render_state_CRenderer *p = (struct __pyx_obj_15lm_render_state_CRenderer *)o;
  p->vec_mat.std::vector<struct __pyx_t_15lm_render_state_CMat *>::~vector();
  p->vec_pos.std::vector<struct __pyx_t_15lm_render_state_CPos *>::~vector();
  p->vec_color.std::vector<struct __pyx_t_15lm_render_state_CColor *>::~vector();
  p->vec_coords.std::vector<struct __pyx_t_15lm_render_state_CCoords *>::~vector();
  p->stk_cadd.std::stack<struct __pyx_t_15lm_render_state_CColor *>::~stack();
  p->stk_cmul.std::stack<struct __pyx_t_15lm_render_state_CColor *>::~stack();
  p->stk_mat.std::stack<struct __pyx_t_15lm_render_state_CMat *>::~stack();
  p->stk_blend_mode.std::stack<int>::~stack();
  p->cadd_pool.std::stack<struct __pyx_t_15lm_render_state_CColor *>::~stack();
  p->cmul_pool.std::stack<struct __pyx_t_15lm_render_state_CColor *>::~stack();
  p->mat_pool.std::stack<struct __pyx_t_15lm_render_state_CMat *>::~stack();
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_15lm_render_state_CRenderer[] = {
  {__Pyx_NAMESTR("init"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_3init, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("begin"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_5begin, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("push_state"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_7push_state, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("pop_state"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_9pop_state, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_mask"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_11set_mask, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("draw_image"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_13draw_image, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("reg_pos"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_15reg_pos, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("reg_color"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_17reg_color, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("reg_mat"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_19reg_mat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("reg_coords"), (PyCFunction)__pyx_pw_15lm_render_state_9CRenderer_21reg_coords, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CRenderer = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CRenderer = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CRenderer = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CRenderer = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_15lm_render_state_CRenderer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lm_render_state.CRenderer"), /*tp_name*/
  sizeof(struct __pyx_obj_15lm_render_state_CRenderer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15lm_render_state_CRenderer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CRenderer, /*tp_as_number*/
  &__pyx_tp_as_sequence_CRenderer, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CRenderer, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CRenderer, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15lm_render_state_CRenderer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15lm_render_state_CRenderer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("lm_render_state"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_n_s__Enable, __pyx_k__Enable, sizeof(__pyx_k__Enable), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___is_tex_dirty, __pyx_k___is_tex_dirty, sizeof(__pyx_k___is_tex_dirty), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__blend_mode_idx, __pyx_k__blend_mode_idx, sizeof(__pyx_k__blend_mode_idx), 0, 0, 1, 1},
  {&__pyx_n_s__cadd_idx, __pyx_k__cadd_idx, sizeof(__pyx_k__cadd_idx), 0, 0, 1, 1},
  {&__pyx_n_s__cmul_idx, __pyx_k__cmul_idx, sizeof(__pyx_k__cmul_idx), 0, 0, 1, 1},
  {&__pyx_n_s__coord_idx, __pyx_k__coord_idx, sizeof(__pyx_k__coord_idx), 0, 0, 1, 1},
  {&__pyx_n_s__g, __pyx_k__g, sizeof(__pyx_k__g), 0, 0, 1, 1},
  {&__pyx_n_s__gl, __pyx_k__gl, sizeof(__pyx_k__gl), 0, 0, 1, 1},
  {&__pyx_n_s__glBlendEquationEXT, __pyx_k__glBlendEquationEXT, sizeof(__pyx_k__glBlendEquationEXT), 0, 0, 1, 1},
  {&__pyx_n_s__mat_idx, __pyx_k__mat_idx, sizeof(__pyx_k__mat_idx), 0, 0, 1, 1},
  {&__pyx_n_s__r, __pyx_k__r, sizeof(__pyx_k__r), 0, 0, 1, 1},
  {&__pyx_n_s__r0, __pyx_k__r0, sizeof(__pyx_k__r0), 0, 0, 1, 1},
  {&__pyx_n_s__r1, __pyx_k__r1, sizeof(__pyx_k__r1), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__s0, __pyx_k__s0, sizeof(__pyx_k__s0), 0, 0, 1, 1},
  {&__pyx_n_s__s1, __pyx_k__s1, sizeof(__pyx_k__s1), 0, 0, 1, 1},
  {&__pyx_n_s__t0, __pyx_k__t0, sizeof(__pyx_k__t0), 0, 0, 1, 1},
  {&__pyx_n_s__t1, __pyx_k__t1, sizeof(__pyx_k__t1), 0, 0, 1, 1},
  {&__pyx_n_s__tex_coord_idx, __pyx_k__tex_coord_idx, sizeof(__pyx_k__tex_coord_idx), 0, 0, 1, 1},
  {&__pyx_n_s__tex_id, __pyx_k__tex_id, sizeof(__pyx_k__tex_id), 0, 0, 1, 1},
  {&__pyx_n_s__tex_tgt, __pyx_k__tex_tgt, sizeof(__pyx_k__tex_tgt), 0, 0, 1, 1},
  {&__pyx_n_s__vbuf_head, __pyx_k__vbuf_head, sizeof(__pyx_k__vbuf_head), 0, 0, 1, 1},
  {&__pyx_n_s__x, __pyx_k__x, sizeof(__pyx_k__x), 0, 0, 1, 1},
  {&__pyx_n_s__x0, __pyx_k__x0, sizeof(__pyx_k__x0), 0, 0, 1, 1},
  {&__pyx_n_s__x1, __pyx_k__x1, sizeof(__pyx_k__x1), 0, 0, 1, 1},
  {&__pyx_n_s__x2, __pyx_k__x2, sizeof(__pyx_k__x2), 0, 0, 1, 1},
  {&__pyx_n_s__x3, __pyx_k__x3, sizeof(__pyx_k__x3), 0, 0, 1, 1},
  {&__pyx_n_s__xrange, __pyx_k__xrange, sizeof(__pyx_k__xrange), 0, 0, 1, 1},
  {&__pyx_n_s__y, __pyx_k__y, sizeof(__pyx_k__y), 0, 0, 1, 1},
  {&__pyx_n_s__y0, __pyx_k__y0, sizeof(__pyx_k__y0), 0, 0, 1, 1},
  {&__pyx_n_s__y1, __pyx_k__y1, sizeof(__pyx_k__y1), 0, 0, 1, 1},
  {&__pyx_n_s__y2, __pyx_k__y2, sizeof(__pyx_k__y2), 0, 0, 1, 1},
  {&__pyx_n_s__y3, __pyx_k__y3, sizeof(__pyx_k__y3), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_24 = PyInt_FromLong(24); if (unlikely(!__pyx_int_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlm_render_state(void); /*proto*/
PyMODINIT_FUNC initlm_render_state(void)
#else
PyMODINIT_FUNC PyInit_lm_render_state(void); /*proto*/
PyMODINIT_FUNC PyInit_lm_render_state(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_lm_render_state(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("lm_render_state"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "lm_render_state")) {
      if (unlikely(PyDict_SetItemString(modules, "lm_render_state", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_lm_render_state) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_15lm_render_state_CRenderer = &__pyx_vtable_15lm_render_state_CRenderer;
  __pyx_vtable_15lm_render_state_CRenderer.set_blend_mode = (void (*)(struct __pyx_obj_15lm_render_state_CRenderer *, int))__pyx_f_15lm_render_state_9CRenderer_set_blend_mode;
  __pyx_vtable_15lm_render_state_CRenderer.get_mat = (struct __pyx_t_15lm_render_state_CMat *(*)(struct __pyx_obj_15lm_render_state_CRenderer *))__pyx_f_15lm_render_state_9CRenderer_get_mat;
  __pyx_vtable_15lm_render_state_CRenderer.get_cadd = (struct __pyx_t_15lm_render_state_CColor *(*)(struct __pyx_obj_15lm_render_state_CRenderer *))__pyx_f_15lm_render_state_9CRenderer_get_cadd;
  __pyx_vtable_15lm_render_state_CRenderer.get_cmul = (struct __pyx_t_15lm_render_state_CColor *(*)(struct __pyx_obj_15lm_render_state_CRenderer *))__pyx_f_15lm_render_state_9CRenderer_get_cmul;
  __pyx_vtable_15lm_render_state_CRenderer.del_mat = (void (*)(struct __pyx_obj_15lm_render_state_CRenderer *, struct __pyx_t_15lm_render_state_CMat *))__pyx_f_15lm_render_state_9CRenderer_del_mat;
  __pyx_vtable_15lm_render_state_CRenderer.del_cadd = (void (*)(struct __pyx_obj_15lm_render_state_CRenderer *, struct __pyx_t_15lm_render_state_CColor *))__pyx_f_15lm_render_state_9CRenderer_del_cadd;
  __pyx_vtable_15lm_render_state_CRenderer.del_cmul = (void (*)(struct __pyx_obj_15lm_render_state_CRenderer *, struct __pyx_t_15lm_render_state_CColor *))__pyx_f_15lm_render_state_9CRenderer_del_cmul;
  __pyx_vtable_15lm_render_state_CRenderer._append = (void (*)(struct __pyx_obj_15lm_render_state_CRenderer *, int, int))__pyx_f_15lm_render_state_9CRenderer__append;
  __pyx_vtable_15lm_render_state_CRenderer._update_contex = (void (*)(struct __pyx_obj_15lm_render_state_CRenderer *))__pyx_f_15lm_render_state_9CRenderer__update_contex;
  __pyx_vtable_15lm_render_state_CRenderer._flush = (void (*)(struct __pyx_obj_15lm_render_state_CRenderer *))__pyx_f_15lm_render_state_9CRenderer__flush;
  if (PyType_Ready(&__pyx_type_15lm_render_state_CRenderer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_15lm_render_state_CRenderer.tp_dict, __pyx_vtabptr_15lm_render_state_CRenderer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CRenderer", (PyObject *)&__pyx_type_15lm_render_state_CRenderer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_15lm_render_state_CRenderer = &__pyx_type_15lm_render_state_CRenderer;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "lm_render_state.pyx":1
 * cimport c_opengl as gl             # <<<<<<<<<<<<<<
 * from libcpp.vector cimport vector
 * from libcpp.stack cimport stack
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init lm_render_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init lm_render_state");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE GLenum __Pyx_PyInt_from_py_GLenum(PyObject* x) {
    const GLenum neg_one = (GLenum)-1, const_zero = (GLenum)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(GLenum) == sizeof(char)) {
        if (is_unsigned)
            return (GLenum)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (GLenum)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(GLenum) == sizeof(short)) {
        if (is_unsigned)
            return (GLenum)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (GLenum)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(GLenum) == sizeof(int)) {
        if (is_unsigned)
            return (GLenum)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (GLenum)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(GLenum) == sizeof(long)) {
        if (is_unsigned)
            return (GLenum)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (GLenum)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(GLenum) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (GLenum)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (GLenum)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
        #else
        GLenum val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        #endif
        return (GLenum)-1;
    }
}

static CYTHON_INLINE GLsizei __Pyx_PyInt_from_py_GLsizei(PyObject* x) {
    const GLsizei neg_one = (GLsizei)-1, const_zero = (GLsizei)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(GLsizei) == sizeof(char)) {
        if (is_unsigned)
            return (GLsizei)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (GLsizei)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(GLsizei) == sizeof(short)) {
        if (is_unsigned)
            return (GLsizei)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (GLsizei)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(GLsizei) == sizeof(int)) {
        if (is_unsigned)
            return (GLsizei)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (GLsizei)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(GLsizei) == sizeof(long)) {
        if (is_unsigned)
            return (GLsizei)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (GLsizei)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(GLsizei) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (GLsizei)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (GLsizei)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
        #else
        GLsizei val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        #endif
        return (GLsizei)-1;
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
